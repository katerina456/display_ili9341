
tft_ili_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006590  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093dc  080093dc  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080093dc  080093dc  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093dc  080093dc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080093e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000024  08009408  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08009408  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c68  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e6  00000000  00000000  00026cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  000284a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000d485  00000000  00000000  00028b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00007fb2  00000000  00000000  00035fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0004a95c  00000000  00000000  0003df6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000888cb  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000005c8  00000000  00000000  00088920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000015d4  00000000  00000000  00088ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e34 	.word	0x08002e34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08002e34 	.word	0x08002e34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f0xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000224:	2390      	movs	r3, #144	; 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2200      	movs	r2, #0
 800022a:	2110      	movs	r1, #16
 800022c:	0018      	movs	r0, r3
 800022e:	f001 fd0a 	bl	8001c46 <HAL_GPIO_WritePin>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 800023c:	2390      	movs	r3, #144	; 0x90
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	2201      	movs	r2, #1
 8000242:	2110      	movs	r1, #16
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fcfe 	bl	8001c46 <HAL_GPIO_WritePin>
}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	4808      	ldr	r0, [pc, #32]	; (800027c <ILI9341_Reset+0x2c>)
 800025a:	2200      	movs	r2, #0
 800025c:	0019      	movs	r1, r3
 800025e:	f001 fcf2 	bl	8001c46 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000262:	2005      	movs	r0, #5
 8000264:	f001 f914 	bl	8001490 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <ILI9341_Reset+0x2c>)
 800026e:	2201      	movs	r2, #1
 8000270:	0019      	movs	r1, r3
 8000272:	f001 fce8 	bl	8001c46 <HAL_GPIO_WritePin>
}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	48000400 	.word	0x48000400

08000280 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	0002      	movs	r2, r0
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	4807      	ldr	r0, [pc, #28]	; (80002b0 <ILI9341_WriteCommand+0x30>)
 8000292:	2200      	movs	r2, #0
 8000294:	0019      	movs	r1, r3
 8000296:	f001 fcd6 	bl	8001c46 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800029a:	2301      	movs	r3, #1
 800029c:	425b      	negs	r3, r3
 800029e:	1df9      	adds	r1, r7, #7
 80002a0:	4804      	ldr	r0, [pc, #16]	; (80002b4 <ILI9341_WriteCommand+0x34>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	f002 f9d2 	bl	800264c <HAL_SPI_Transmit>
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b002      	add	sp, #8
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	48000400 	.word	0x48000400
 80002b4:	20000040 	.word	0x20000040

080002b8 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80002b8:	b5b0      	push	{r4, r5, r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80002c2:	2380      	movs	r3, #128	; 0x80
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	4816      	ldr	r0, [pc, #88]	; (8000320 <ILI9341_WriteData+0x68>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	0019      	movs	r1, r3
 80002cc:	f001 fcbb 	bl	8001c46 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80002d0:	e01e      	b.n	8000310 <ILI9341_WriteData+0x58>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	2280      	movs	r2, #128	; 0x80
 80002d6:	0212      	lsls	r2, r2, #8
 80002d8:	4293      	cmp	r3, r2
 80002da:	d901      	bls.n	80002e0 <ILI9341_WriteData+0x28>
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	021b      	lsls	r3, r3, #8
 80002e0:	210e      	movs	r1, #14
 80002e2:	187a      	adds	r2, r7, r1
 80002e4:	8013      	strh	r3, [r2, #0]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80002e6:	2301      	movs	r3, #1
 80002e8:	425c      	negs	r4, r3
 80002ea:	000d      	movs	r5, r1
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	881a      	ldrh	r2, [r3, #0]
 80002f0:	6879      	ldr	r1, [r7, #4]
 80002f2:	480c      	ldr	r0, [pc, #48]	; (8000324 <ILI9341_WriteData+0x6c>)
 80002f4:	0023      	movs	r3, r4
 80002f6:	f002 f9a9 	bl	800264c <HAL_SPI_Transmit>
        buff += chunk_size;
 80002fa:	0029      	movs	r1, r5
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	18d3      	adds	r3, r2, r3
 8000304:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d1dd      	bne.n	80002d2 <ILI9341_WriteData+0x1a>
    }
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b004      	add	sp, #16
 800031e:	bdb0      	pop	{r4, r5, r7, pc}
 8000320:	48000400 	.word	0x48000400
 8000324:	20000040 	.word	0x20000040

08000328 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000328:	b5b0      	push	{r4, r5, r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	0005      	movs	r5, r0
 8000330:	000c      	movs	r4, r1
 8000332:	0010      	movs	r0, r2
 8000334:	0019      	movs	r1, r3
 8000336:	1dbb      	adds	r3, r7, #6
 8000338:	1c2a      	adds	r2, r5, #0
 800033a:	801a      	strh	r2, [r3, #0]
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	1c22      	adds	r2, r4, #0
 8000340:	801a      	strh	r2, [r3, #0]
 8000342:	1cbb      	adds	r3, r7, #2
 8000344:	1c02      	adds	r2, r0, #0
 8000346:	801a      	strh	r2, [r3, #0]
 8000348:	003b      	movs	r3, r7
 800034a:	1c0a      	adds	r2, r1, #0
 800034c:	801a      	strh	r2, [r3, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800034e:	202a      	movs	r0, #42	; 0x2a
 8000350:	f7ff ff96 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000354:	1dbb      	adds	r3, r7, #6
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	0a1b      	lsrs	r3, r3, #8
 800035a:	b29b      	uxth	r3, r3
 800035c:	b2da      	uxtb	r2, r3
 800035e:	210c      	movs	r1, #12
 8000360:	187b      	adds	r3, r7, r1
 8000362:	701a      	strb	r2, [r3, #0]
 8000364:	1dbb      	adds	r3, r7, #6
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	b2da      	uxtb	r2, r3
 800036a:	187b      	adds	r3, r7, r1
 800036c:	705a      	strb	r2, [r3, #1]
 800036e:	1cbb      	adds	r3, r7, #2
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	0a1b      	lsrs	r3, r3, #8
 8000374:	b29b      	uxth	r3, r3
 8000376:	b2da      	uxtb	r2, r3
 8000378:	187b      	adds	r3, r7, r1
 800037a:	709a      	strb	r2, [r3, #2]
 800037c:	1cbb      	adds	r3, r7, #2
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	b2da      	uxtb	r2, r3
 8000382:	187b      	adds	r3, r7, r1
 8000384:	70da      	strb	r2, [r3, #3]
        ILI9341_WriteData(data, sizeof(data));
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2104      	movs	r1, #4
 800038a:	0018      	movs	r0, r3
 800038c:	f7ff ff94 	bl	80002b8 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000390:	202b      	movs	r0, #43	; 0x2b
 8000392:	f7ff ff75 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	0a1b      	lsrs	r3, r3, #8
 800039c:	b29b      	uxth	r3, r3
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	2108      	movs	r1, #8
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	701a      	strb	r2, [r3, #0]
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	705a      	strb	r2, [r3, #1]
 80003b0:	003b      	movs	r3, r7
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	0a1b      	lsrs	r3, r3, #8
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	b2da      	uxtb	r2, r3
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	709a      	strb	r2, [r3, #2]
 80003be:	003b      	movs	r3, r7
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	70da      	strb	r2, [r3, #3]
        ILI9341_WriteData(data, sizeof(data));
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2104      	movs	r1, #4
 80003cc:	0018      	movs	r0, r3
 80003ce:	f7ff ff73 	bl	80002b8 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80003d2:	202c      	movs	r0, #44	; 0x2c
 80003d4:	f7ff ff54 	bl	8000280 <ILI9341_WriteCommand>
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b004      	add	sp, #16
 80003de:	bdb0      	pop	{r4, r5, r7, pc}

080003e0 <ILI9341_Init>:

void ILI9341_Init() {
 80003e0:	b5b0      	push	{r4, r5, r7, lr}
 80003e2:	b09a      	sub	sp, #104	; 0x68
 80003e4:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80003e6:	f7ff ff1b 	bl	8000220 <ILI9341_Select>
    ILI9341_Reset();
 80003ea:	f7ff ff31 	bl	8000250 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff46 	bl	8000280 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80003f4:	23fa      	movs	r3, #250	; 0xfa
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 f849 	bl	8001490 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80003fe:	20cb      	movs	r0, #203	; 0xcb
 8000400:	f7ff ff3e 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000404:	2060      	movs	r0, #96	; 0x60
 8000406:	183b      	adds	r3, r7, r0
 8000408:	4a85      	ldr	r2, [pc, #532]	; (8000620 <ILI9341_Init+0x240>)
 800040a:	6811      	ldr	r1, [r2, #0]
 800040c:	6019      	str	r1, [r3, #0]
 800040e:	7912      	ldrb	r2, [r2, #4]
 8000410:	711a      	strb	r2, [r3, #4]
        ILI9341_WriteData(data, sizeof(data));
 8000412:	183b      	adds	r3, r7, r0
 8000414:	2105      	movs	r1, #5
 8000416:	0018      	movs	r0, r3
 8000418:	f7ff ff4e 	bl	80002b8 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800041c:	20cf      	movs	r0, #207	; 0xcf
 800041e:	f7ff ff2f 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000422:	205c      	movs	r0, #92	; 0x5c
 8000424:	183b      	adds	r3, r7, r0
 8000426:	4a7f      	ldr	r2, [pc, #508]	; (8000624 <ILI9341_Init+0x244>)
 8000428:	8811      	ldrh	r1, [r2, #0]
 800042a:	8019      	strh	r1, [r3, #0]
 800042c:	7892      	ldrb	r2, [r2, #2]
 800042e:	709a      	strb	r2, [r3, #2]
        ILI9341_WriteData(data, sizeof(data));
 8000430:	183b      	adds	r3, r7, r0
 8000432:	2103      	movs	r1, #3
 8000434:	0018      	movs	r0, r3
 8000436:	f7ff ff3f 	bl	80002b8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800043a:	20e8      	movs	r0, #232	; 0xe8
 800043c:	f7ff ff20 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000440:	2058      	movs	r0, #88	; 0x58
 8000442:	183b      	adds	r3, r7, r0
 8000444:	4a78      	ldr	r2, [pc, #480]	; (8000628 <ILI9341_Init+0x248>)
 8000446:	8811      	ldrh	r1, [r2, #0]
 8000448:	8019      	strh	r1, [r3, #0]
 800044a:	7892      	ldrb	r2, [r2, #2]
 800044c:	709a      	strb	r2, [r3, #2]
        ILI9341_WriteData(data, sizeof(data));
 800044e:	183b      	adds	r3, r7, r0
 8000450:	2103      	movs	r1, #3
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff ff30 	bl	80002b8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000458:	20ea      	movs	r0, #234	; 0xea
 800045a:	f7ff ff11 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 800045e:	2154      	movs	r1, #84	; 0x54
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	801a      	strh	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2102      	movs	r1, #2
 800046a:	0018      	movs	r0, r3
 800046c:	f7ff ff24 	bl	80002b8 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8000470:	20ed      	movs	r0, #237	; 0xed
 8000472:	f7ff ff05 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000476:	2150      	movs	r1, #80	; 0x50
 8000478:	187b      	adds	r3, r7, r1
 800047a:	4a6c      	ldr	r2, [pc, #432]	; (800062c <ILI9341_Init+0x24c>)
 800047c:	601a      	str	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2104      	movs	r1, #4
 8000482:	0018      	movs	r0, r3
 8000484:	f7ff ff18 	bl	80002b8 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000488:	20f7      	movs	r0, #247	; 0xf7
 800048a:	f7ff fef9 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800048e:	214c      	movs	r1, #76	; 0x4c
 8000490:	187b      	adds	r3, r7, r1
 8000492:	4a67      	ldr	r2, [pc, #412]	; (8000630 <ILI9341_Init+0x250>)
 8000494:	7812      	ldrb	r2, [r2, #0]
 8000496:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2101      	movs	r1, #1
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff ff0b 	bl	80002b8 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80004a2:	20c0      	movs	r0, #192	; 0xc0
 80004a4:	f7ff feec 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80004a8:	2148      	movs	r1, #72	; 0x48
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	4a61      	ldr	r2, [pc, #388]	; (8000634 <ILI9341_Init+0x254>)
 80004ae:	7812      	ldrb	r2, [r2, #0]
 80004b0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2101      	movs	r1, #1
 80004b6:	0018      	movs	r0, r3
 80004b8:	f7ff fefe 	bl	80002b8 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80004bc:	20c1      	movs	r0, #193	; 0xc1
 80004be:	f7ff fedf 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80004c2:	2144      	movs	r1, #68	; 0x44
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	4a5c      	ldr	r2, [pc, #368]	; (8000638 <ILI9341_Init+0x258>)
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2101      	movs	r1, #1
 80004d0:	0018      	movs	r0, r3
 80004d2:	f7ff fef1 	bl	80002b8 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80004d6:	20c5      	movs	r0, #197	; 0xc5
 80004d8:	f7ff fed2 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80004dc:	2140      	movs	r1, #64	; 0x40
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	4a56      	ldr	r2, [pc, #344]	; (800063c <ILI9341_Init+0x25c>)
 80004e2:	801a      	strh	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2102      	movs	r1, #2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff fee5 	bl	80002b8 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80004ee:	20c7      	movs	r0, #199	; 0xc7
 80004f0:	f7ff fec6 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80004f4:	213c      	movs	r1, #60	; 0x3c
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	4a51      	ldr	r2, [pc, #324]	; (8000640 <ILI9341_Init+0x260>)
 80004fa:	7812      	ldrb	r2, [r2, #0]
 80004fc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2101      	movs	r1, #1
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff fed8 	bl	80002b8 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8000508:	2036      	movs	r0, #54	; 0x36
 800050a:	f7ff feb9 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 800050e:	2138      	movs	r1, #56	; 0x38
 8000510:	187b      	adds	r3, r7, r1
 8000512:	4a4c      	ldr	r2, [pc, #304]	; (8000644 <ILI9341_Init+0x264>)
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2101      	movs	r1, #1
 800051c:	0018      	movs	r0, r3
 800051e:	f7ff fecb 	bl	80002b8 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000522:	203a      	movs	r0, #58	; 0x3a
 8000524:	f7ff feac 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000528:	2134      	movs	r1, #52	; 0x34
 800052a:	187b      	adds	r3, r7, r1
 800052c:	4a46      	ldr	r2, [pc, #280]	; (8000648 <ILI9341_Init+0x268>)
 800052e:	7812      	ldrb	r2, [r2, #0]
 8000530:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2101      	movs	r1, #1
 8000536:	0018      	movs	r0, r3
 8000538:	f7ff febe 	bl	80002b8 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800053c:	20b1      	movs	r0, #177	; 0xb1
 800053e:	f7ff fe9f 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000542:	2130      	movs	r1, #48	; 0x30
 8000544:	187b      	adds	r3, r7, r1
 8000546:	22c0      	movs	r2, #192	; 0xc0
 8000548:	0152      	lsls	r2, r2, #5
 800054a:	801a      	strh	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2102      	movs	r1, #2
 8000550:	0018      	movs	r0, r3
 8000552:	f7ff feb1 	bl	80002b8 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000556:	20b6      	movs	r0, #182	; 0xb6
 8000558:	f7ff fe92 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800055c:	202c      	movs	r0, #44	; 0x2c
 800055e:	183b      	adds	r3, r7, r0
 8000560:	4a3a      	ldr	r2, [pc, #232]	; (800064c <ILI9341_Init+0x26c>)
 8000562:	8811      	ldrh	r1, [r2, #0]
 8000564:	8019      	strh	r1, [r3, #0]
 8000566:	7892      	ldrb	r2, [r2, #2]
 8000568:	709a      	strb	r2, [r3, #2]
        ILI9341_WriteData(data, sizeof(data));
 800056a:	183b      	adds	r3, r7, r0
 800056c:	2103      	movs	r1, #3
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff fea2 	bl	80002b8 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000574:	20f2      	movs	r0, #242	; 0xf2
 8000576:	f7ff fe83 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800057a:	2128      	movs	r1, #40	; 0x28
 800057c:	187b      	adds	r3, r7, r1
 800057e:	4a34      	ldr	r2, [pc, #208]	; (8000650 <ILI9341_Init+0x270>)
 8000580:	7812      	ldrb	r2, [r2, #0]
 8000582:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2101      	movs	r1, #1
 8000588:	0018      	movs	r0, r3
 800058a:	f7ff fe95 	bl	80002b8 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800058e:	2026      	movs	r0, #38	; 0x26
 8000590:	f7ff fe76 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000594:	2124      	movs	r1, #36	; 0x24
 8000596:	187b      	adds	r3, r7, r1
 8000598:	4a2e      	ldr	r2, [pc, #184]	; (8000654 <ILI9341_Init+0x274>)
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2101      	movs	r1, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f7ff fe88 	bl	80002b8 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80005a8:	20e0      	movs	r0, #224	; 0xe0
 80005aa:	f7ff fe69 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80005ae:	2014      	movs	r0, #20
 80005b0:	183b      	adds	r3, r7, r0
 80005b2:	4a29      	ldr	r2, [pc, #164]	; (8000658 <ILI9341_Init+0x278>)
 80005b4:	ca32      	ldmia	r2!, {r1, r4, r5}
 80005b6:	c332      	stmia	r3!, {r1, r4, r5}
 80005b8:	8811      	ldrh	r1, [r2, #0]
 80005ba:	8019      	strh	r1, [r3, #0]
 80005bc:	7892      	ldrb	r2, [r2, #2]
 80005be:	709a      	strb	r2, [r3, #2]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80005c0:	183b      	adds	r3, r7, r0
 80005c2:	210f      	movs	r1, #15
 80005c4:	0018      	movs	r0, r3
 80005c6:	f7ff fe77 	bl	80002b8 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80005ca:	20e1      	movs	r0, #225	; 0xe1
 80005cc:	f7ff fe58 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4a22      	ldr	r2, [pc, #136]	; (800065c <ILI9341_Init+0x27c>)
 80005d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005d6:	c313      	stmia	r3!, {r0, r1, r4}
 80005d8:	8811      	ldrh	r1, [r2, #0]
 80005da:	8019      	strh	r1, [r3, #0]
 80005dc:	7892      	ldrb	r2, [r2, #2]
 80005de:	709a      	strb	r2, [r3, #2]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	210f      	movs	r1, #15
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff fe67 	bl	80002b8 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80005ea:	2011      	movs	r0, #17
 80005ec:	f7ff fe48 	bl	8000280 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80005f0:	2078      	movs	r0, #120	; 0x78
 80005f2:	f000 ff4d 	bl	8001490 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80005f6:	2029      	movs	r0, #41	; 0x29
 80005f8:	f7ff fe42 	bl	8000280 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80005fc:	2036      	movs	r0, #54	; 0x36
 80005fe:	f7ff fe3f 	bl	8000280 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000602:	003b      	movs	r3, r7
 8000604:	4a16      	ldr	r2, [pc, #88]	; (8000660 <ILI9341_Init+0x280>)
 8000606:	7812      	ldrb	r2, [r2, #0]
 8000608:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800060a:	003b      	movs	r3, r7
 800060c:	2101      	movs	r1, #1
 800060e:	0018      	movs	r0, r3
 8000610:	f7ff fe52 	bl	80002b8 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000614:	f7ff fe10 	bl	8000238 <ILI9341_Unselect>
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b01a      	add	sp, #104	; 0x68
 800061e:	bdb0      	pop	{r4, r5, r7, pc}
 8000620:	08002e4c 	.word	0x08002e4c
 8000624:	08002e54 	.word	0x08002e54
 8000628:	08002e58 	.word	0x08002e58
 800062c:	81120364 	.word	0x81120364
 8000630:	08002e5c 	.word	0x08002e5c
 8000634:	08002e60 	.word	0x08002e60
 8000638:	08002e64 	.word	0x08002e64
 800063c:	0000283e 	.word	0x0000283e
 8000640:	08002e68 	.word	0x08002e68
 8000644:	08002e6c 	.word	0x08002e6c
 8000648:	08002e70 	.word	0x08002e70
 800064c:	08002e74 	.word	0x08002e74
 8000650:	08002e78 	.word	0x08002e78
 8000654:	08002e7c 	.word	0x08002e7c
 8000658:	08002e80 	.word	0x08002e80
 800065c:	08002e90 	.word	0x08002e90
 8000660:	08002ea0 	.word	0x08002ea0

08000664 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	0004      	movs	r4, r0
 800066c:	0008      	movs	r0, r1
 800066e:	0011      	movs	r1, r2
 8000670:	1dbb      	adds	r3, r7, #6
 8000672:	1c22      	adds	r2, r4, #0
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	1c02      	adds	r2, r0, #0
 800067a:	801a      	strh	r2, [r3, #0]
 800067c:	1cbb      	adds	r3, r7, #2
 800067e:	1c0a      	adds	r2, r1, #0
 8000680:	801a      	strh	r2, [r3, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8000682:	1dbb      	adds	r3, r7, #6
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	2b7f      	cmp	r3, #127	; 0x7f
 8000688:	d829      	bhi.n	80006de <ILI9341_DrawPixel+0x7a>
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	2b9f      	cmp	r3, #159	; 0x9f
 8000690:	d825      	bhi.n	80006de <ILI9341_DrawPixel+0x7a>
        return;

    ILI9341_Select();
 8000692:	f7ff fdc5 	bl	8000220 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8000696:	1dbb      	adds	r3, r7, #6
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	b29a      	uxth	r2, r3
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	b29c      	uxth	r4, r3
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	8819      	ldrh	r1, [r3, #0]
 80006aa:	1dbb      	adds	r3, r7, #6
 80006ac:	8818      	ldrh	r0, [r3, #0]
 80006ae:	0023      	movs	r3, r4
 80006b0:	f7ff fe3a 	bl	8000328 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80006b4:	1cbb      	adds	r3, r7, #2
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	210c      	movs	r1, #12
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	701a      	strb	r2, [r3, #0]
 80006c4:	1cbb      	adds	r3, r7, #2
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	705a      	strb	r2, [r3, #1]
    ILI9341_WriteData(data, sizeof(data));
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2102      	movs	r1, #2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff fdf0 	bl	80002b8 <ILI9341_WriteData>

    ILI9341_Unselect();
 80006d8:	f7ff fdae 	bl	8000238 <ILI9341_Unselect>
 80006dc:	e000      	b.n	80006e0 <ILI9341_DrawPixel+0x7c>
        return;
 80006de:	46c0      	nop			; (mov r8, r8)
}
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b005      	add	sp, #20
 80006e4:	bd90      	pop	{r4, r7, pc}

080006e6 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80006e6:	b082      	sub	sp, #8
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	0004      	movs	r4, r0
 80006f0:	0008      	movs	r0, r1
 80006f2:	0011      	movs	r1, r2
 80006f4:	2204      	movs	r2, #4
 80006f6:	2530      	movs	r5, #48	; 0x30
 80006f8:	1952      	adds	r2, r2, r5
 80006fa:	19d2      	adds	r2, r2, r7
 80006fc:	6013      	str	r3, [r2, #0]
 80006fe:	1dbb      	adds	r3, r7, #6
 8000700:	1c22      	adds	r2, r4, #0
 8000702:	801a      	strh	r2, [r3, #0]
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	1c02      	adds	r2, r0, #0
 8000708:	801a      	strh	r2, [r3, #0]
 800070a:	1cfb      	adds	r3, r7, #3
 800070c:	1c0a      	adds	r2, r1, #0
 800070e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000710:	2304      	movs	r3, #4
 8000712:	0029      	movs	r1, r5
 8000714:	185b      	adds	r3, r3, r1
 8000716:	19db      	adds	r3, r3, r7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b29a      	uxth	r2, r3
 800071c:	1dbb      	adds	r3, r7, #6
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	18d3      	adds	r3, r2, r3
 8000722:	b29b      	uxth	r3, r3
 8000724:	3b01      	subs	r3, #1
 8000726:	b29c      	uxth	r4, r3
 8000728:	2304      	movs	r3, #4
 800072a:	185b      	adds	r3, r3, r1
 800072c:	19db      	adds	r3, r3, r7
 800072e:	785b      	ldrb	r3, [r3, #1]
 8000730:	b29a      	uxth	r2, r3
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	18d3      	adds	r3, r2, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	3b01      	subs	r3, #1
 800073c:	b29a      	uxth	r2, r3
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	8819      	ldrh	r1, [r3, #0]
 8000742:	1dbb      	adds	r3, r7, #6
 8000744:	8818      	ldrh	r0, [r3, #0]
 8000746:	0013      	movs	r3, r2
 8000748:	0022      	movs	r2, r4
 800074a:	f7ff fded 	bl	8000328 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	e053      	b.n	80007fc <ILI9341_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 8000754:	2304      	movs	r3, #4
 8000756:	2030      	movs	r0, #48	; 0x30
 8000758:	181b      	adds	r3, r3, r0
 800075a:	19db      	adds	r3, r3, r7
 800075c:	685a      	ldr	r2, [r3, #4]
 800075e:	1cfb      	adds	r3, r7, #3
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	3b20      	subs	r3, #32
 8000764:	2104      	movs	r1, #4
 8000766:	1809      	adds	r1, r1, r0
 8000768:	19c9      	adds	r1, r1, r7
 800076a:	7849      	ldrb	r1, [r1, #1]
 800076c:	434b      	muls	r3, r1
 800076e:	0019      	movs	r1, r3
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	18cb      	adds	r3, r1, r3
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	18d3      	adds	r3, r2, r3
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	e030      	b.n	80007e4 <ILI9341_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 8000782:	697a      	ldr	r2, [r7, #20]
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	409a      	lsls	r2, r3
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	4013      	ands	r3, r2
 800078e:	d013      	beq.n	80007b8 <ILI9341_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000790:	203c      	movs	r0, #60	; 0x3c
 8000792:	183b      	adds	r3, r7, r0
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	2110      	movs	r1, #16
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	183b      	adds	r3, r7, r0
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	705a      	strb	r2, [r3, #1]
                ILI9341_WriteData(data, sizeof(data));
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2102      	movs	r1, #2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fd81 	bl	80002b8 <ILI9341_WriteData>
 80007b6:	e012      	b.n	80007de <ILI9341_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80007b8:	2040      	movs	r0, #64	; 0x40
 80007ba:	183b      	adds	r3, r7, r0
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	210c      	movs	r1, #12
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	183b      	adds	r3, r7, r0
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	705a      	strb	r2, [r3, #1]
                ILI9341_WriteData(data, sizeof(data));
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2102      	movs	r1, #2
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff fd6d 	bl	80002b8 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	2304      	movs	r3, #4
 80007e6:	2230      	movs	r2, #48	; 0x30
 80007e8:	189b      	adds	r3, r3, r2
 80007ea:	19db      	adds	r3, r3, r7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	001a      	movs	r2, r3
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d3c5      	bcc.n	8000782 <ILI9341_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3301      	adds	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	2304      	movs	r3, #4
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	189b      	adds	r3, r3, r2
 8000802:	19db      	adds	r3, r3, r7
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	001a      	movs	r2, r3
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	4293      	cmp	r3, r2
 800080c:	d3a2      	bcc.n	8000754 <ILI9341_WriteChar+0x6e>
            }
        }
    }
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b008      	add	sp, #32
 8000816:	bcb0      	pop	{r4, r5, r7}
 8000818:	bc08      	pop	{r3}
 800081a:	b002      	add	sp, #8
 800081c:	4718      	bx	r3

0800081e <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800081e:	b082      	sub	sp, #8
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	b087      	sub	sp, #28
 8000824:	af04      	add	r7, sp, #16
 8000826:	603a      	str	r2, [r7, #0]
 8000828:	2204      	movs	r2, #4
 800082a:	2418      	movs	r4, #24
 800082c:	1912      	adds	r2, r2, r4
 800082e:	2408      	movs	r4, #8
 8000830:	46a4      	mov	ip, r4
 8000832:	44bc      	add	ip, r7
 8000834:	4462      	add	r2, ip
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	1dbb      	adds	r3, r7, #6
 800083a:	1c02      	adds	r2, r0, #0
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	1c0a      	adds	r2, r1, #0
 8000842:	801a      	strh	r2, [r3, #0]
    ILI9341_Select();
 8000844:	f7ff fcec 	bl	8000220 <ILI9341_Select>

    while(*str) {
 8000848:	e060      	b.n	800090c <ILI9341_WriteString+0xee>
        if(x + font.width >= ILI9341_WIDTH) {
 800084a:	1dbb      	adds	r3, r7, #6
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	2204      	movs	r2, #4
 8000850:	2018      	movs	r0, #24
 8000852:	1812      	adds	r2, r2, r0
 8000854:	2108      	movs	r1, #8
 8000856:	468c      	mov	ip, r1
 8000858:	44bc      	add	ip, r7
 800085a:	4462      	add	r2, ip
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	189b      	adds	r3, r3, r2
 8000860:	2b7f      	cmp	r3, #127	; 0x7f
 8000862:	dd23      	ble.n	80008ac <ILI9341_WriteString+0x8e>
            x = 0;
 8000864:	1dbb      	adds	r3, r7, #6
 8000866:	2200      	movs	r2, #0
 8000868:	801a      	strh	r2, [r3, #0]
            y += font.height;
 800086a:	2304      	movs	r3, #4
 800086c:	181b      	adds	r3, r3, r0
 800086e:	2208      	movs	r2, #8
 8000870:	4694      	mov	ip, r2
 8000872:	44bc      	add	ip, r7
 8000874:	4463      	add	r3, ip
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	b299      	uxth	r1, r3
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	1d3a      	adds	r2, r7, #4
 800087e:	8812      	ldrh	r2, [r2, #0]
 8000880:	188a      	adds	r2, r1, r2
 8000882:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	2204      	movs	r2, #4
 800088a:	1812      	adds	r2, r2, r0
 800088c:	2108      	movs	r1, #8
 800088e:	468c      	mov	ip, r1
 8000890:	44bc      	add	ip, r7
 8000892:	4462      	add	r2, ip
 8000894:	7852      	ldrb	r2, [r2, #1]
 8000896:	189b      	adds	r3, r3, r2
 8000898:	2b9f      	cmp	r3, #159	; 0x9f
 800089a:	dc3c      	bgt.n	8000916 <ILI9341_WriteString+0xf8>
                break;
            }

            if(*str == ' ') {
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b20      	cmp	r3, #32
 80008a2:	d103      	bne.n	80008ac <ILI9341_WriteString+0x8e>
                // skip spaces in the beginning of the new line
                str++;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	3301      	adds	r3, #1
 80008a8:	603b      	str	r3, [r7, #0]
                continue;
 80008aa:	e02f      	b.n	800090c <ILI9341_WriteString+0xee>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	781d      	ldrb	r5, [r3, #0]
 80008b0:	2304      	movs	r3, #4
 80008b2:	2618      	movs	r6, #24
 80008b4:	199b      	adds	r3, r3, r6
 80008b6:	2208      	movs	r2, #8
 80008b8:	4694      	mov	ip, r2
 80008ba:	44bc      	add	ip, r7
 80008bc:	4463      	add	r3, ip
 80008be:	1d3a      	adds	r2, r7, #4
 80008c0:	8814      	ldrh	r4, [r2, #0]
 80008c2:	1dba      	adds	r2, r7, #6
 80008c4:	8810      	ldrh	r0, [r2, #0]
 80008c6:	2228      	movs	r2, #40	; 0x28
 80008c8:	2108      	movs	r1, #8
 80008ca:	1852      	adds	r2, r2, r1
 80008cc:	19d2      	adds	r2, r2, r7
 80008ce:	8812      	ldrh	r2, [r2, #0]
 80008d0:	9202      	str	r2, [sp, #8]
 80008d2:	2224      	movs	r2, #36	; 0x24
 80008d4:	1852      	adds	r2, r2, r1
 80008d6:	19d2      	adds	r2, r2, r7
 80008d8:	8812      	ldrh	r2, [r2, #0]
 80008da:	9201      	str	r2, [sp, #4]
 80008dc:	466a      	mov	r2, sp
 80008de:	6859      	ldr	r1, [r3, #4]
 80008e0:	6011      	str	r1, [r2, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	002a      	movs	r2, r5
 80008e6:	0021      	movs	r1, r4
 80008e8:	f7ff fefd 	bl	80006e6 <ILI9341_WriteChar>
        x += font.width;
 80008ec:	2304      	movs	r3, #4
 80008ee:	199b      	adds	r3, r3, r6
 80008f0:	2208      	movs	r2, #8
 80008f2:	4694      	mov	ip, r2
 80008f4:	44bc      	add	ip, r7
 80008f6:	4463      	add	r3, ip
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b299      	uxth	r1, r3
 80008fc:	1dbb      	adds	r3, r7, #6
 80008fe:	1dba      	adds	r2, r7, #6
 8000900:	8812      	ldrh	r2, [r2, #0]
 8000902:	188a      	adds	r2, r1, r2
 8000904:	801a      	strh	r2, [r3, #0]
        str++;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d19a      	bne.n	800084a <ILI9341_WriteString+0x2c>
 8000914:	e000      	b.n	8000918 <ILI9341_WriteString+0xfa>
                break;
 8000916:	46c0      	nop			; (mov r8, r8)
    }

    ILI9341_Unselect();
 8000918:	f7ff fc8e 	bl	8000238 <ILI9341_Unselect>
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b003      	add	sp, #12
 8000922:	bcf0      	pop	{r4, r5, r6, r7}
 8000924:	bc08      	pop	{r3}
 8000926:	b002      	add	sp, #8
 8000928:	4718      	bx	r3
	...

0800092c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800092c:	b5b0      	push	{r4, r5, r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	0005      	movs	r5, r0
 8000934:	000c      	movs	r4, r1
 8000936:	0010      	movs	r0, r2
 8000938:	0019      	movs	r1, r3
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	1c2a      	adds	r2, r5, #0
 800093e:	801a      	strh	r2, [r3, #0]
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	1c22      	adds	r2, r4, #0
 8000944:	801a      	strh	r2, [r3, #0]
 8000946:	1cbb      	adds	r3, r7, #2
 8000948:	1c02      	adds	r2, r0, #0
 800094a:	801a      	strh	r2, [r3, #0]
 800094c:	003b      	movs	r3, r7
 800094e:	1c0a      	adds	r2, r1, #0
 8000950:	801a      	strh	r2, [r3, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000952:	1dbb      	adds	r3, r7, #6
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2b7f      	cmp	r3, #127	; 0x7f
 8000958:	d900      	bls.n	800095c <ILI9341_FillRectangle+0x30>
 800095a:	e074      	b.n	8000a46 <ILI9341_FillRectangle+0x11a>
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	2b9f      	cmp	r3, #159	; 0x9f
 8000962:	d900      	bls.n	8000966 <ILI9341_FillRectangle+0x3a>
 8000964:	e06f      	b.n	8000a46 <ILI9341_FillRectangle+0x11a>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000966:	1dbb      	adds	r3, r7, #6
 8000968:	881a      	ldrh	r2, [r3, #0]
 800096a:	1cbb      	adds	r3, r7, #2
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	2b80      	cmp	r3, #128	; 0x80
 8000972:	dd05      	ble.n	8000980 <ILI9341_FillRectangle+0x54>
 8000974:	1cbb      	adds	r3, r7, #2
 8000976:	1dba      	adds	r2, r7, #6
 8000978:	8812      	ldrh	r2, [r2, #0]
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	1a8a      	subs	r2, r1, r2
 800097e:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	881a      	ldrh	r2, [r3, #0]
 8000984:	003b      	movs	r3, r7
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	18d3      	adds	r3, r2, r3
 800098a:	2ba0      	cmp	r3, #160	; 0xa0
 800098c:	dd05      	ble.n	800099a <ILI9341_FillRectangle+0x6e>
 800098e:	003b      	movs	r3, r7
 8000990:	1d3a      	adds	r2, r7, #4
 8000992:	8812      	ldrh	r2, [r2, #0]
 8000994:	21a0      	movs	r1, #160	; 0xa0
 8000996:	1a8a      	subs	r2, r1, r2
 8000998:	801a      	strh	r2, [r3, #0]

    ILI9341_Select();
 800099a:	f7ff fc41 	bl	8000220 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800099e:	1dba      	adds	r2, r7, #6
 80009a0:	1cbb      	adds	r3, r7, #2
 80009a2:	8812      	ldrh	r2, [r2, #0]
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	18d3      	adds	r3, r2, r3
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	3b01      	subs	r3, #1
 80009ac:	b29c      	uxth	r4, r3
 80009ae:	1d3a      	adds	r2, r7, #4
 80009b0:	003b      	movs	r3, r7
 80009b2:	8812      	ldrh	r2, [r2, #0]
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	18d3      	adds	r3, r2, r3
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	3b01      	subs	r3, #1
 80009bc:	b29a      	uxth	r2, r3
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	8819      	ldrh	r1, [r3, #0]
 80009c2:	1dbb      	adds	r3, r7, #6
 80009c4:	8818      	ldrh	r0, [r3, #0]
 80009c6:	0013      	movs	r3, r2
 80009c8:	0022      	movs	r2, r4
 80009ca:	f7ff fcad 	bl	8000328 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80009ce:	2120      	movs	r1, #32
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	200c      	movs	r0, #12
 80009dc:	183b      	adds	r3, r7, r0
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	183b      	adds	r3, r7, r0
 80009e8:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <ILI9341_FillRectangle+0x124>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	0019      	movs	r1, r3
 80009f4:	f001 f927 	bl	8001c46 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	003a      	movs	r2, r7
 80009fc:	8812      	ldrh	r2, [r2, #0]
 80009fe:	801a      	strh	r2, [r3, #0]
 8000a00:	e01a      	b.n	8000a38 <ILI9341_FillRectangle+0x10c>
        for(x = w; x > 0; x--) {
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	1cba      	adds	r2, r7, #2
 8000a06:	8812      	ldrh	r2, [r2, #0]
 8000a08:	801a      	strh	r2, [r3, #0]
 8000a0a:	e00c      	b.n	8000a26 <ILI9341_FillRectangle+0xfa>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	425b      	negs	r3, r3
 8000a10:	220c      	movs	r2, #12
 8000a12:	18b9      	adds	r1, r7, r2
 8000a14:	480f      	ldr	r0, [pc, #60]	; (8000a54 <ILI9341_FillRectangle+0x128>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	f001 fe18 	bl	800264c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000a1c:	1dbb      	adds	r3, r7, #6
 8000a1e:	881a      	ldrh	r2, [r3, #0]
 8000a20:	1dbb      	adds	r3, r7, #6
 8000a22:	3a01      	subs	r2, #1
 8000a24:	801a      	strh	r2, [r3, #0]
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1ee      	bne.n	8000a0c <ILI9341_FillRectangle+0xe0>
    for(y = h; y > 0; y--) {
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	881a      	ldrh	r2, [r3, #0]
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	3a01      	subs	r2, #1
 8000a36:	801a      	strh	r2, [r3, #0]
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1e0      	bne.n	8000a02 <ILI9341_FillRectangle+0xd6>
        }
    }

    ILI9341_Unselect();
 8000a40:	f7ff fbfa 	bl	8000238 <ILI9341_Unselect>
 8000a44:	e000      	b.n	8000a48 <ILI9341_FillRectangle+0x11c>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000a46:	46c0      	nop			; (mov r8, r8)
}
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b004      	add	sp, #16
 8000a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	48000400 	.word	0x48000400
 8000a54:	20000040 	.word	0x20000040

08000a58 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	0002      	movs	r2, r0
 8000a60:	1dbb      	adds	r3, r7, #6
 8000a62:	801a      	strh	r2, [r3, #0]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000a64:	1dbb      	adds	r3, r7, #6
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	23a0      	movs	r3, #160	; 0xa0
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff ff5b 	bl	800092c <ILI9341_FillRectangle>
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000a7e:	b5b0      	push	{r4, r5, r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	0005      	movs	r5, r0
 8000a86:	000c      	movs	r4, r1
 8000a88:	0010      	movs	r0, r2
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	1dbb      	adds	r3, r7, #6
 8000a8e:	1c2a      	adds	r2, r5, #0
 8000a90:	801a      	strh	r2, [r3, #0]
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	1c22      	adds	r2, r4, #0
 8000a96:	801a      	strh	r2, [r3, #0]
 8000a98:	1cbb      	adds	r3, r7, #2
 8000a9a:	1c02      	adds	r2, r0, #0
 8000a9c:	801a      	strh	r2, [r3, #0]
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	1c0a      	adds	r2, r1, #0
 8000aa2:	801a      	strh	r2, [r3, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000aa4:	1dbb      	adds	r3, r7, #6
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8000aaa:	d839      	bhi.n	8000b20 <ILI9341_DrawImage+0xa2>
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	2b9f      	cmp	r3, #159	; 0x9f
 8000ab2:	d835      	bhi.n	8000b20 <ILI9341_DrawImage+0xa2>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8000ab4:	1dbb      	adds	r3, r7, #6
 8000ab6:	881a      	ldrh	r2, [r3, #0]
 8000ab8:	1cbb      	adds	r3, r7, #2
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	2b80      	cmp	r3, #128	; 0x80
 8000ac0:	dc30      	bgt.n	8000b24 <ILI9341_DrawImage+0xa6>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	18d3      	adds	r3, r2, r3
 8000acc:	2ba0      	cmp	r3, #160	; 0xa0
 8000ace:	dc2b      	bgt.n	8000b28 <ILI9341_DrawImage+0xaa>

    ILI9341_Select();
 8000ad0:	f7ff fba6 	bl	8000220 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000ad4:	1dba      	adds	r2, r7, #6
 8000ad6:	1cbb      	adds	r3, r7, #2
 8000ad8:	8812      	ldrh	r2, [r2, #0]
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	18d3      	adds	r3, r2, r3
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	b29c      	uxth	r4, r3
 8000ae4:	1d3a      	adds	r2, r7, #4
 8000ae6:	003b      	movs	r3, r7
 8000ae8:	8812      	ldrh	r2, [r2, #0]
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	18d3      	adds	r3, r2, r3
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	3b01      	subs	r3, #1
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	8819      	ldrh	r1, [r3, #0]
 8000af8:	1dbb      	adds	r3, r7, #6
 8000afa:	8818      	ldrh	r0, [r3, #0]
 8000afc:	0013      	movs	r3, r2
 8000afe:	0022      	movs	r2, r4
 8000b00:	f7ff fc12 	bl	8000328 <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000b04:	1cbb      	adds	r3, r7, #2
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	003a      	movs	r2, r7
 8000b0a:	8812      	ldrh	r2, [r2, #0]
 8000b0c:	4353      	muls	r3, r2
 8000b0e:	005a      	lsls	r2, r3, #1
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fbcf 	bl	80002b8 <ILI9341_WriteData>
    ILI9341_Unselect();
 8000b1a:	f7ff fb8d 	bl	8000238 <ILI9341_Unselect>
 8000b1e:	e004      	b.n	8000b2a <ILI9341_DrawImage+0xac>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	e002      	b.n	8000b2a <ILI9341_DrawImage+0xac>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	e000      	b.n	8000b2a <ILI9341_DrawImage+0xac>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000b28:	46c0      	nop			; (mov r8, r8)
}
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bdb0      	pop	{r4, r5, r7, pc}

08000b30 <ILI9341_InvertColors>:

void ILI9341_InvertColors(bool invert) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	0002      	movs	r2, r0
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	701a      	strb	r2, [r3, #0]
    ILI9341_Select();
 8000b3c:	f7ff fb70 	bl	8000220 <ILI9341_Select>
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <ILI9341_InvertColors+0x1c>
 8000b48:	2321      	movs	r3, #33	; 0x21
 8000b4a:	e000      	b.n	8000b4e <ILI9341_InvertColors+0x1e>
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fb96 	bl	8000280 <ILI9341_WriteCommand>
    ILI9341_Unselect();
 8000b54:	f7ff fb70 	bl	8000238 <ILI9341_Unselect>
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <greeting_init.2>:

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  void greeting_init() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	4663      	mov	r3, ip
 8000b68:	607b      	str	r3, [r7, #4]
	  ILI9341_FillScreen(ILI9341_BLACK);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff ff74 	bl	8000a58 <ILI9341_FillScreen>

	        for(int x = 0; x < ILI9341_WIDTH; x++) {
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e010      	b.n	8000b98 <greeting_init.2+0x38>
	            ILI9341_DrawPixel(x, 0, ILI9341_RED);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	221f      	movs	r2, #31
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff fd70 	bl	8000664 <ILI9341_DrawPixel>
	            ILI9341_DrawPixel(x, ILI9341_HEIGHT-1, ILI9341_RED);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	221f      	movs	r2, #31
 8000b8a:	219f      	movs	r1, #159	; 0x9f
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff fd69 	bl	8000664 <ILI9341_DrawPixel>
	        for(int x = 0; x < ILI9341_WIDTH; x++) {
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b9c:	ddeb      	ble.n	8000b76 <greeting_init.2+0x16>
	        }

	        for(int y = 0; y < ILI9341_HEIGHT; y++) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	e010      	b.n	8000bc6 <greeting_init.2+0x66>
	            ILI9341_DrawPixel(0, y, ILI9341_RED);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	221f      	movs	r2, #31
 8000baa:	0019      	movs	r1, r3
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff fd59 	bl	8000664 <ILI9341_DrawPixel>
	            ILI9341_DrawPixel(ILI9341_WIDTH-1, y, ILI9341_RED);
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	221f      	movs	r2, #31
 8000bb8:	0019      	movs	r1, r3
 8000bba:	207f      	movs	r0, #127	; 0x7f
 8000bbc:	f7ff fd52 	bl	8000664 <ILI9341_DrawPixel>
	        for(int y = 0; y < ILI9341_HEIGHT; y++) {
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	2b9f      	cmp	r3, #159	; 0x9f
 8000bca:	ddeb      	ble.n	8000ba4 <greeting_init.2+0x44>
	        }

	        HAL_Delay(500);
 8000bcc:	23fa      	movs	r3, #250	; 0xfa
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f000 fc5d 	bl	8001490 <HAL_Delay>

	        ILI9341_WriteString(2, 72, "Press the button to see variants", Font_7x10, ILI9341_GREEN, ILI9341_BLACK);
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <greeting_init.2+0xa0>)
 8000bd8:	480a      	ldr	r0, [pc, #40]	; (8000c04 <greeting_init.2+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	9202      	str	r2, [sp, #8]
 8000bde:	22fc      	movs	r2, #252	; 0xfc
 8000be0:	00d2      	lsls	r2, r2, #3
 8000be2:	9201      	str	r2, [sp, #4]
 8000be4:	466a      	mov	r2, sp
 8000be6:	6859      	ldr	r1, [r3, #4]
 8000be8:	6011      	str	r1, [r2, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	0002      	movs	r2, r0
 8000bee:	2148      	movs	r1, #72	; 0x48
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f7ff fe14 	bl	800081e <ILI9341_WriteString>
  }
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	20000000 	.word	0x20000000
 8000c04:	08002ea4 	.word	0x08002ea4

08000c08 <main>:
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
int main(void)
 8000c0e:	2310      	movs	r3, #16
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	603b      	str	r3, [r7, #0]
  HAL_Init();
 8000c14:	f000 fbd8 	bl	80013c8 <HAL_Init>
      }*/
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c18:	f000 f992 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1c:	f000 fa2c 	bl	8001078 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c20:	f000 fa0c 	bl	800103c <MX_DMA_Init>
  MX_SPI1_Init();
 8000c24:	f000 f9cc 	bl	8000fc0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000c28:	003b      	movs	r3, r7
 8000c2a:	469c      	mov	ip, r3
 8000c2c:	f000 f820 	bl	8000c70 <init.0>
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int flag = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  {
	 // loop();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ) {
 8000c34:	2390      	movs	r3, #144	; 0x90
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	2101      	movs	r1, #1
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 ffe6 	bl	8001c0c <HAL_GPIO_ReadPin>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d0f7      	beq.n	8000c34 <main+0x2c>
		flag ++;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3301      	adds	r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
			if (flag == 4) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d101      	bne.n	8000c54 <main+0x4c>
				flag = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
			}

		handler_click(flag);
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	003b      	movs	r3, r7
 8000c58:	469c      	mov	ip, r3
 8000c5a:	0010      	movs	r0, r2
 8000c5c:	f000 f81a 	bl	8000c94 <handler_click.1>
		HAL_Delay(200);
 8000c60:	20c8      	movs	r0, #200	; 0xc8
 8000c62:	f000 fc15 	bl	8001490 <HAL_Delay>
		greeting_init();
 8000c66:	003b      	movs	r3, r7
 8000c68:	469c      	mov	ip, r3
 8000c6a:	f7ff ff79 	bl	8000b60 <greeting_init.2>
	if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ) {
 8000c6e:	e7e1      	b.n	8000c34 <main+0x2c>

08000c70 <init.0>:
  void init() {
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4664      	mov	r4, ip
 8000c78:	4663      	mov	r3, ip
 8000c7a:	607b      	str	r3, [r7, #4]
      ILI9341_Unselect();
 8000c7c:	f7ff fadc 	bl	8000238 <ILI9341_Unselect>
      ILI9341_Init();
 8000c80:	f7ff fbae 	bl	80003e0 <ILI9341_Init>
      greeting_init();
 8000c84:	46a4      	mov	ip, r4
 8000c86:	f7ff ff6b 	bl	8000b60 <greeting_init.2>
  }
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b003      	add	sp, #12
 8000c90:	bd90      	pop	{r4, r7, pc}
	...

08000c94 <handler_click.1>:
  void handler_click(int num) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af04      	add	r7, sp, #16
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	603b      	str	r3, [r7, #0]
	  switch ( num ) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d100      	bne.n	8000ca8 <handler_click.1+0x14>
 8000ca6:	e110      	b.n	8000eca <handler_click.1+0x236>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	dd00      	ble.n	8000cb0 <handler_click.1+0x1c>
 8000cae:	e11d      	b.n	8000eec <handler_click.1+0x258>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d003      	beq.n	8000cbe <handler_click.1+0x2a>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d043      	beq.n	8000d44 <handler_click.1+0xb0>
    }
 8000cbc:	e116      	b.n	8000eec <handler_click.1+0x258>
        ILI9341_FillScreen(ILI9341_BLACK);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff feca 	bl	8000a58 <ILI9341_FillScreen>
        ILI9341_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ILI9341_RED, ILI9341_BLACK);
 8000cc4:	4b8b      	ldr	r3, [pc, #556]	; (8000ef4 <handler_click.1+0x260>)
 8000cc6:	488c      	ldr	r0, [pc, #560]	; (8000ef8 <handler_click.1+0x264>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	9202      	str	r2, [sp, #8]
 8000ccc:	221f      	movs	r2, #31
 8000cce:	9201      	str	r2, [sp, #4]
 8000cd0:	466a      	mov	r2, sp
 8000cd2:	6859      	ldr	r1, [r3, #4]
 8000cd4:	6011      	str	r1, [r2, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	0002      	movs	r2, r0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fd9e 	bl	800081e <ILI9341_WriteString>
        ILI9341_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum dolor sit amet", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8000ce2:	4b86      	ldr	r3, [pc, #536]	; (8000efc <handler_click.1+0x268>)
 8000ce4:	4886      	ldr	r0, [pc, #536]	; (8000f00 <handler_click.1+0x26c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	9202      	str	r2, [sp, #8]
 8000cea:	22fc      	movs	r2, #252	; 0xfc
 8000cec:	00d2      	lsls	r2, r2, #3
 8000cee:	9201      	str	r2, [sp, #4]
 8000cf0:	466a      	mov	r2, sp
 8000cf2:	6859      	ldr	r1, [r3, #4]
 8000cf4:	6011      	str	r1, [r2, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	211e      	movs	r1, #30
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fd8e 	bl	800081e <ILI9341_WriteString>
        ILI9341_WriteString(0, 3*10+3*18, "Font_16x26, blue, lorem ipsum dolor sit amet", Font_16x26, ILI9341_BLUE, ILI9341_BLACK);
 8000d02:	4b80      	ldr	r3, [pc, #512]	; (8000f04 <handler_click.1+0x270>)
 8000d04:	4880      	ldr	r0, [pc, #512]	; (8000f08 <handler_click.1+0x274>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	9202      	str	r2, [sp, #8]
 8000d0a:	22f8      	movs	r2, #248	; 0xf8
 8000d0c:	0212      	lsls	r2, r2, #8
 8000d0e:	9201      	str	r2, [sp, #4]
 8000d10:	466a      	mov	r2, sp
 8000d12:	6859      	ldr	r1, [r3, #4]
 8000d14:	6011      	str	r1, [r2, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	0002      	movs	r2, r0
 8000d1a:	2154      	movs	r1, #84	; 0x54
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff fd7e 	bl	800081e <ILI9341_WriteString>
        HAL_Delay(1000);
 8000d22:	23fa      	movs	r3, #250	; 0xfa
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fbb2 	bl	8001490 <HAL_Delay>
        ILI9341_InvertColors(true);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff feff 	bl	8000b30 <ILI9341_InvertColors>
        HAL_Delay(1000);
 8000d32:	23fa      	movs	r3, #250	; 0xfa
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fbaa 	bl	8001490 <HAL_Delay>
        ILI9341_InvertColors(false);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fef7 	bl	8000b30 <ILI9341_InvertColors>
	    break;
 8000d42:	e0d3      	b.n	8000eec <handler_click.1+0x258>
        ILI9341_FillScreen(ILI9341_WHITE);
 8000d44:	4b71      	ldr	r3, [pc, #452]	; (8000f0c <handler_click.1+0x278>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fe86 	bl	8000a58 <ILI9341_FillScreen>
        ILI9341_WriteString(0, 20, "WHITE", Font_11x18, ILI9341_BLACK, ILI9341_RED);
 8000d4c:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <handler_click.1+0x268>)
 8000d4e:	4870      	ldr	r0, [pc, #448]	; (8000f10 <handler_click.1+0x27c>)
 8000d50:	221f      	movs	r2, #31
 8000d52:	9202      	str	r2, [sp, #8]
 8000d54:	2200      	movs	r2, #0
 8000d56:	9201      	str	r2, [sp, #4]
 8000d58:	466a      	mov	r2, sp
 8000d5a:	6859      	ldr	r1, [r3, #4]
 8000d5c:	6011      	str	r1, [r2, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	0002      	movs	r2, r0
 8000d62:	2114      	movs	r1, #20
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fd5a 	bl	800081e <ILI9341_WriteString>
        HAL_Delay(500);
 8000d6a:	23fa      	movs	r3, #250	; 0xfa
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 fb8e 	bl	8001490 <HAL_Delay>
        ILI9341_FillScreen(ILI9341_BLUE);
 8000d74:	23f8      	movs	r3, #248	; 0xf8
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fe6d 	bl	8000a58 <ILI9341_FillScreen>
        ILI9341_WriteString(0, 0, "BLUE", Font_11x18, ILI9341_BLACK, ILI9341_BLUE);
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <handler_click.1+0x268>)
 8000d80:	4864      	ldr	r0, [pc, #400]	; (8000f14 <handler_click.1+0x280>)
 8000d82:	22f8      	movs	r2, #248	; 0xf8
 8000d84:	0212      	lsls	r2, r2, #8
 8000d86:	9202      	str	r2, [sp, #8]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	9201      	str	r2, [sp, #4]
 8000d8c:	466a      	mov	r2, sp
 8000d8e:	6859      	ldr	r1, [r3, #4]
 8000d90:	6011      	str	r1, [r2, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	0002      	movs	r2, r0
 8000d96:	2100      	movs	r1, #0
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff fd40 	bl	800081e <ILI9341_WriteString>
        HAL_Delay(500);
 8000d9e:	23fa      	movs	r3, #250	; 0xfa
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 fb74 	bl	8001490 <HAL_Delay>
        ILI9341_FillScreen(ILI9341_RED);
 8000da8:	201f      	movs	r0, #31
 8000daa:	f7ff fe55 	bl	8000a58 <ILI9341_FillScreen>
        ILI9341_WriteString(0, 0, "RED", Font_11x18, ILI9341_BLACK, ILI9341_RED);
 8000dae:	4b53      	ldr	r3, [pc, #332]	; (8000efc <handler_click.1+0x268>)
 8000db0:	4859      	ldr	r0, [pc, #356]	; (8000f18 <handler_click.1+0x284>)
 8000db2:	221f      	movs	r2, #31
 8000db4:	9202      	str	r2, [sp, #8]
 8000db6:	2200      	movs	r2, #0
 8000db8:	9201      	str	r2, [sp, #4]
 8000dba:	466a      	mov	r2, sp
 8000dbc:	6859      	ldr	r1, [r3, #4]
 8000dbe:	6011      	str	r1, [r2, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fd29 	bl	800081e <ILI9341_WriteString>
        HAL_Delay(500);
 8000dcc:	23fa      	movs	r3, #250	; 0xfa
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 fb5d 	bl	8001490 <HAL_Delay>
        ILI9341_FillScreen(ILI9341_GREEN);
 8000dd6:	23fc      	movs	r3, #252	; 0xfc
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff fe3c 	bl	8000a58 <ILI9341_FillScreen>
        ILI9341_WriteString(0, 0, "GREEN", Font_11x18, ILI9341_BLACK, ILI9341_GREEN);
 8000de0:	4b46      	ldr	r3, [pc, #280]	; (8000efc <handler_click.1+0x268>)
 8000de2:	484e      	ldr	r0, [pc, #312]	; (8000f1c <handler_click.1+0x288>)
 8000de4:	22fc      	movs	r2, #252	; 0xfc
 8000de6:	00d2      	lsls	r2, r2, #3
 8000de8:	9202      	str	r2, [sp, #8]
 8000dea:	2200      	movs	r2, #0
 8000dec:	9201      	str	r2, [sp, #4]
 8000dee:	466a      	mov	r2, sp
 8000df0:	6859      	ldr	r1, [r3, #4]
 8000df2:	6011      	str	r1, [r2, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	0002      	movs	r2, r0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fd0f 	bl	800081e <ILI9341_WriteString>
        HAL_Delay(500);
 8000e00:	23fa      	movs	r3, #250	; 0xfa
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 fb43 	bl	8001490 <HAL_Delay>
        ILI9341_FillScreen(ILI9341_CYAN);
 8000e0a:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <handler_click.1+0x28c>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fe23 	bl	8000a58 <ILI9341_FillScreen>
        ILI9341_WriteString(0, 0, "CYAN", Font_11x18, ILI9341_BLACK, ILI9341_CYAN);
 8000e12:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <handler_click.1+0x268>)
 8000e14:	4843      	ldr	r0, [pc, #268]	; (8000f24 <handler_click.1+0x290>)
 8000e16:	4a42      	ldr	r2, [pc, #264]	; (8000f20 <handler_click.1+0x28c>)
 8000e18:	9202      	str	r2, [sp, #8]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	466a      	mov	r2, sp
 8000e20:	6859      	ldr	r1, [r3, #4]
 8000e22:	6011      	str	r1, [r2, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	0002      	movs	r2, r0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fcf7 	bl	800081e <ILI9341_WriteString>
        HAL_Delay(500);
 8000e30:	23fa      	movs	r3, #250	; 0xfa
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	0018      	movs	r0, r3
 8000e36:	f000 fb2b 	bl	8001490 <HAL_Delay>
        ILI9341_FillScreen(ILI9341_MAGENTA);
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <handler_click.1+0x294>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fe0b 	bl	8000a58 <ILI9341_FillScreen>
        ILI9341_WriteString(0, 0, "MAGENTA", Font_11x18, ILI9341_BLACK, ILI9341_MAGENTA);
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <handler_click.1+0x268>)
 8000e44:	4839      	ldr	r0, [pc, #228]	; (8000f2c <handler_click.1+0x298>)
 8000e46:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <handler_click.1+0x294>)
 8000e48:	9202      	str	r2, [sp, #8]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	9201      	str	r2, [sp, #4]
 8000e4e:	466a      	mov	r2, sp
 8000e50:	6859      	ldr	r1, [r3, #4]
 8000e52:	6011      	str	r1, [r2, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	0002      	movs	r2, r0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fcdf 	bl	800081e <ILI9341_WriteString>
        HAL_Delay(500);
 8000e60:	23fa      	movs	r3, #250	; 0xfa
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 fb13 	bl	8001490 <HAL_Delay>
        ILI9341_FillScreen(ILI9341_YELLOW);
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <handler_click.1+0x29c>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fdf3 	bl	8000a58 <ILI9341_FillScreen>
        ILI9341_WriteString(0, 0, "YELLOW", Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <handler_click.1+0x268>)
 8000e74:	482f      	ldr	r0, [pc, #188]	; (8000f34 <handler_click.1+0x2a0>)
 8000e76:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <handler_click.1+0x29c>)
 8000e78:	9202      	str	r2, [sp, #8]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	9201      	str	r2, [sp, #4]
 8000e7e:	466a      	mov	r2, sp
 8000e80:	6859      	ldr	r1, [r3, #4]
 8000e82:	6011      	str	r1, [r2, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	0002      	movs	r2, r0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fcc7 	bl	800081e <ILI9341_WriteString>
        HAL_Delay(500);
 8000e90:	23fa      	movs	r3, #250	; 0xfa
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	0018      	movs	r0, r3
 8000e96:	f000 fafb 	bl	8001490 <HAL_Delay>
        ILI9341_FillScreen(ILI9341_BLACK);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fddc 	bl	8000a58 <ILI9341_FillScreen>
        ILI9341_WriteString(0, 0, "BLACK", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <handler_click.1+0x268>)
 8000ea2:	4825      	ldr	r0, [pc, #148]	; (8000f38 <handler_click.1+0x2a4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	9202      	str	r2, [sp, #8]
 8000ea8:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <handler_click.1+0x278>)
 8000eaa:	9201      	str	r2, [sp, #4]
 8000eac:	466a      	mov	r2, sp
 8000eae:	6859      	ldr	r1, [r3, #4]
 8000eb0:	6011      	str	r1, [r2, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fcb0 	bl	800081e <ILI9341_WriteString>
        HAL_Delay(500);
 8000ebe:	23fa      	movs	r3, #250	; 0xfa
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 fae4 	bl	8001490 <HAL_Delay>
	    break;
 8000ec8:	e010      	b.n	8000eec <handler_click.1+0x258>
		ILI9341_FillScreen(ILI9341_BLACK);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fdc4 	bl	8000a58 <ILI9341_FillScreen>
		ILI9341_DrawImage((ILI9341_WIDTH - 120) / 2, (ILI9341_HEIGHT - 64) / 2, 120, 60, (const uint16_t*)test_img_240x240);
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <handler_click.1+0x2a8>)
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	233c      	movs	r3, #60	; 0x3c
 8000ed6:	2278      	movs	r2, #120	; 0x78
 8000ed8:	2130      	movs	r1, #48	; 0x30
 8000eda:	2004      	movs	r0, #4
 8000edc:	f7ff fdcf 	bl	8000a7e <ILI9341_DrawImage>
		HAL_Delay(500);
 8000ee0:	23fa      	movs	r3, #250	; 0xfa
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f000 fad3 	bl	8001490 <HAL_Delay>
	    break;
 8000eea:	46c0      	nop			; (mov r8, r8)
    }
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	08002ec8 	.word	0x08002ec8
 8000efc:	20000008 	.word	0x20000008
 8000f00:	08002efc 	.word	0x08002efc
 8000f04:	20000010 	.word	0x20000010
 8000f08:	08002f2c 	.word	0x08002f2c
 8000f0c:	0000ffff 	.word	0x0000ffff
 8000f10:	08002f5c 	.word	0x08002f5c
 8000f14:	08002f64 	.word	0x08002f64
 8000f18:	08002f6c 	.word	0x08002f6c
 8000f1c:	08002f70 	.word	0x08002f70
 8000f20:	0000ffe0 	.word	0x0000ffe0
 8000f24:	08002f78 	.word	0x08002f78
 8000f28:	0000f81f 	.word	0x0000f81f
 8000f2c:	08002f80 	.word	0x08002f80
 8000f30:	000007ff 	.word	0x000007ff
 8000f34:	08002f88 	.word	0x08002f88
 8000f38:	08002f90 	.word	0x08002f90
 8000f3c:	080057cc 	.word	0x080057cc

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b091      	sub	sp, #68	; 0x44
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	2410      	movs	r4, #16
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	2330      	movs	r3, #48	; 0x30
 8000f4e:	001a      	movs	r2, r3
 8000f50:	2100      	movs	r1, #0
 8000f52:	f001 ff67 	bl	8002e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f56:	003b      	movs	r3, r7
 8000f58:	0018      	movs	r0, r3
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f001 ff60 	bl	8002e24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f64:	0021      	movs	r1, r4
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2202      	movs	r2, #2
 8000f6a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2201      	movs	r2, #1
 8000f70:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2210      	movs	r2, #16
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	0018      	movs	r0, r3
 8000f82:	f000 fe7d 	bl	8001c80 <HAL_RCC_OscConfig>
 8000f86:	1e03      	subs	r3, r0, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000f8a:	f000 f915 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	003b      	movs	r3, r7
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f94:	003b      	movs	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9a:	003b      	movs	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2100      	movs	r1, #0
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 f982 	bl	80022b4 <HAL_RCC_ClockConfig>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000fb4:	f000 f900 	bl	80011b8 <Error_Handler>
  }
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b011      	add	sp, #68	; 0x44
 8000fbe:	bd90      	pop	{r4, r7, pc}

08000fc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <MX_SPI1_Init+0x78>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fcc:	2282      	movs	r2, #130	; 0x82
 8000fce:	0052      	lsls	r2, r2, #1
 8000fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fda:	22e0      	movs	r2, #224	; 0xe0
 8000fdc:	00d2      	lsls	r2, r2, #3
 8000fde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_SPI1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_SPI1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_SPI1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_SPI1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_SPI1_Init+0x74>)
 800100e:	2207      	movs	r2, #7
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_SPI1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_SPI1_Init+0x74>)
 800101a:	2208      	movs	r2, #8
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <MX_SPI1_Init+0x74>)
 8001020:	0018      	movs	r0, r3
 8001022:	f001 fa79 	bl	8002518 <HAL_SPI_Init>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800102a:	f000 f8c5 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000040 	.word	0x20000040
 8001038:	40013000 	.word	0x40013000

0800103c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_DMA_Init+0x38>)
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_DMA_Init+0x38>)
 8001048:	2101      	movs	r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_DMA_Init+0x38>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	2201      	movs	r2, #1
 8001054:	4013      	ands	r3, r2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	200a      	movs	r0, #10
 8001060:	f000 fae6 	bl	8001630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001064:	200a      	movs	r0, #10
 8001066:	f000 faf8 	bl	800165a <HAL_NVIC_EnableIRQ>

}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40021000 	.word	0x40021000

08001078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	240c      	movs	r4, #12
 8001080:	193b      	adds	r3, r7, r4
 8001082:	0018      	movs	r0, r3
 8001084:	2314      	movs	r3, #20
 8001086:	001a      	movs	r2, r3
 8001088:	2100      	movs	r1, #0
 800108a:	f001 fecb 	bl	8002e24 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b47      	ldr	r3, [pc, #284]	; (80011ac <MX_GPIO_Init+0x134>)
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	4b46      	ldr	r3, [pc, #280]	; (80011ac <MX_GPIO_Init+0x134>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	0289      	lsls	r1, r1, #10
 8001098:	430a      	orrs	r2, r1
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	4b43      	ldr	r3, [pc, #268]	; (80011ac <MX_GPIO_Init+0x134>)
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	029b      	lsls	r3, r3, #10
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b40      	ldr	r3, [pc, #256]	; (80011ac <MX_GPIO_Init+0x134>)
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <MX_GPIO_Init+0x134>)
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0309      	lsls	r1, r1, #12
 80010b4:	430a      	orrs	r2, r1
 80010b6:	615a      	str	r2, [r3, #20]
 80010b8:	4b3c      	ldr	r3, [pc, #240]	; (80011ac <MX_GPIO_Init+0x134>)
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	031b      	lsls	r3, r3, #12
 80010c0:	4013      	ands	r3, r2
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b39      	ldr	r3, [pc, #228]	; (80011ac <MX_GPIO_Init+0x134>)
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <MX_GPIO_Init+0x134>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	02c9      	lsls	r1, r1, #11
 80010d0:	430a      	orrs	r2, r1
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <MX_GPIO_Init+0x134>)
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	02db      	lsls	r3, r3, #11
 80010dc:	4013      	ands	r3, r2
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010e2:	2390      	movs	r3, #144	; 0x90
 80010e4:	05db      	lsls	r3, r3, #23
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 fdab 	bl	8001c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	482e      	ldr	r0, [pc, #184]	; (80011b0 <MX_GPIO_Init+0x138>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	0019      	movs	r1, r3
 80010fa:	f000 fda4 	bl	8001c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80010fe:	23c0      	movs	r3, #192	; 0xc0
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	482c      	ldr	r0, [pc, #176]	; (80011b4 <MX_GPIO_Init+0x13c>)
 8001104:	2200      	movs	r2, #0
 8001106:	0019      	movs	r1, r3
 8001108:	f000 fd9d 	bl	8001c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800110c:	193b      	adds	r3, r7, r4
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	193b      	adds	r3, r7, r4
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001118:	193b      	adds	r3, r7, r4
 800111a:	2202      	movs	r2, #2
 800111c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	193a      	adds	r2, r7, r4
 8001120:	2390      	movs	r3, #144	; 0x90
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	0011      	movs	r1, r2
 8001126:	0018      	movs	r0, r3
 8001128:	f000 fc00 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800112c:	193b      	adds	r3, r7, r4
 800112e:	2210      	movs	r2, #16
 8001130:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	2201      	movs	r2, #1
 8001136:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	193b      	adds	r3, r7, r4
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	193a      	adds	r2, r7, r4
 8001146:	2390      	movs	r3, #144	; 0x90
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f000 fbed 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001152:	0021      	movs	r1, r4
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	0052      	lsls	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	000c      	movs	r4, r1
 800115e:	193b      	adds	r3, r7, r4
 8001160:	2201      	movs	r2, #1
 8001162:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	193b      	adds	r3, r7, r4
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	193b      	adds	r3, r7, r4
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	193b      	adds	r3, r7, r4
 8001172:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <MX_GPIO_Init+0x138>)
 8001174:	0019      	movs	r1, r3
 8001176:	0010      	movs	r0, r2
 8001178:	f000 fbd8 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117c:	0021      	movs	r1, r4
 800117e:	187b      	adds	r3, r7, r1
 8001180:	22c0      	movs	r2, #192	; 0xc0
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2201      	movs	r2, #1
 800118a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	187b      	adds	r3, r7, r1
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <MX_GPIO_Init+0x13c>)
 800119c:	0019      	movs	r1, r3
 800119e:	0010      	movs	r0, r2
 80011a0:	f000 fbc4 	bl	800192c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b009      	add	sp, #36	; 0x24
 80011aa:	bd90      	pop	{r4, r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000800 	.word	0x48000800
 80011b4:	48000400 	.word	0x48000400

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <Error_Handler+0x8>
	...

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_MspInit+0x44>)
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_MspInit+0x44>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	430a      	orrs	r2, r1
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_MspInit+0x44>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2201      	movs	r2, #1
 80011dc:	4013      	ands	r3, r2
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x44>)
 80011e4:	69da      	ldr	r2, [r3, #28]
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_MspInit+0x44>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	0549      	lsls	r1, r1, #21
 80011ec:	430a      	orrs	r2, r1
 80011ee:	61da      	str	r2, [r3, #28]
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_MspInit+0x44>)
 80011f2:	69da      	ldr	r2, [r3, #28]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	055b      	lsls	r3, r3, #21
 80011f8:	4013      	ands	r3, r2
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	b002      	add	sp, #8
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b08b      	sub	sp, #44	; 0x2c
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	2414      	movs	r4, #20
 8001216:	193b      	adds	r3, r7, r4
 8001218:	0018      	movs	r0, r3
 800121a:	2314      	movs	r3, #20
 800121c:	001a      	movs	r2, r3
 800121e:	2100      	movs	r1, #0
 8001220:	f001 fe00 	bl	8002e24 <memset>
  if(hspi->Instance==SPI1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a33      	ldr	r2, [pc, #204]	; (80012f8 <HAL_SPI_MspInit+0xec>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d160      	bne.n	80012f0 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_SPI_MspInit+0xf0>)
 8001230:	699a      	ldr	r2, [r3, #24]
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <HAL_SPI_MspInit+0xf0>)
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	0149      	lsls	r1, r1, #5
 8001238:	430a      	orrs	r2, r1
 800123a:	619a      	str	r2, [r3, #24]
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_SPI_MspInit+0xf0>)
 800123e:	699a      	ldr	r2, [r3, #24]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	015b      	lsls	r3, r3, #5
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_SPI_MspInit+0xf0>)
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <HAL_SPI_MspInit+0xf0>)
 8001250:	2180      	movs	r1, #128	; 0x80
 8001252:	0289      	lsls	r1, r1, #10
 8001254:	430a      	orrs	r2, r1
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_SPI_MspInit+0xf0>)
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	029b      	lsls	r3, r3, #10
 8001260:	4013      	ands	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001266:	0021      	movs	r1, r4
 8001268:	187b      	adds	r3, r7, r1
 800126a:	22e0      	movs	r2, #224	; 0xe0
 800126c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2202      	movs	r2, #2
 8001272:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	187b      	adds	r3, r7, r1
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127a:	187b      	adds	r3, r7, r1
 800127c:	2203      	movs	r2, #3
 800127e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	187a      	adds	r2, r7, r1
 8001288:	2390      	movs	r3, #144	; 0x90
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	0011      	movs	r1, r2
 800128e:	0018      	movs	r0, r3
 8001290:	f000 fb4c 	bl	800192c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_SPI_MspInit+0xf8>)
 8001298:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 800129c:	2210      	movs	r2, #16
 800129e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 f9e4 	bl	8001694 <HAL_DMA_Init>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 80012d0:	f7ff ff72 	bl	80011b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_SPI_MspInit+0xf4>)
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	2019      	movs	r0, #25
 80012e6:	f000 f9a3 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80012ea:	2019      	movs	r0, #25
 80012ec:	f000 f9b5 	bl	800165a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b00b      	add	sp, #44	; 0x2c
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	40013000 	.word	0x40013000
 80012fc:	40021000 	.word	0x40021000
 8001300:	200000a4 	.word	0x200000a4
 8001304:	40020030 	.word	0x40020030

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132c:	f000 f894 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <DMA1_Channel2_3_IRQHandler+0x14>)
 800133e:	0018      	movs	r0, r3
 8001340:	f000 fa35 	bl	80017ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	200000a4 	.word	0x200000a4

08001350 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <SPI1_IRQHandler+0x14>)
 8001356:	0018      	movs	r0, r3
 8001358:	f001 fafa 	bl	8002950 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	20000040 	.word	0x20000040

08001368 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001376:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800137a:	490e      	ldr	r1, [pc, #56]	; (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800137c:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <LoopForever+0xe>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001390:	4c0b      	ldr	r4, [pc, #44]	; (80013c0 <LoopForever+0x16>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800139e:	f7ff ffe3 	bl	8001368 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80013a2:	f001 fd1b 	bl	8002ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff fc2f 	bl	8000c08 <main>

080013aa <LoopForever>:

LoopForever:
    b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   r0, =_estack
 80013ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80013b8:	080093e4 	.word	0x080093e4
  ldr r2, =_sbss
 80013bc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80013c0:	200000ec 	.word	0x200000ec

080013c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_COMP_IRQHandler>
	...

080013c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_Init+0x24>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_Init+0x24>)
 80013d2:	2110      	movs	r1, #16
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f809 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013de:	f7ff fef1 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_InitTick+0x5c>)
 80013fa:	681c      	ldr	r4, [r3, #0]
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_InitTick+0x60>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	0019      	movs	r1, r3
 8001402:	23fa      	movs	r3, #250	; 0xfa
 8001404:	0098      	lsls	r0, r3, #2
 8001406:	f7fe fe7f 	bl	8000108 <__udivsi3>
 800140a:	0003      	movs	r3, r0
 800140c:	0019      	movs	r1, r3
 800140e:	0020      	movs	r0, r4
 8001410:	f7fe fe7a 	bl	8000108 <__udivsi3>
 8001414:	0003      	movs	r3, r0
 8001416:	0018      	movs	r0, r3
 8001418:	f000 f92f 	bl	800167a <HAL_SYSTICK_Config>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d001      	beq.n	8001424 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e00f      	b.n	8001444 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d80b      	bhi.n	8001442 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	2301      	movs	r3, #1
 800142e:	425b      	negs	r3, r3
 8001430:	2200      	movs	r2, #0
 8001432:	0018      	movs	r0, r3
 8001434:	f000 f8fc 	bl	8001630 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_InitTick+0x64>)
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b003      	add	sp, #12
 800144a:	bd90      	pop	{r4, r7, pc}
 800144c:	20000018 	.word	0x20000018
 8001450:	20000020 	.word	0x20000020
 8001454:	2000001c 	.word	0x2000001c

08001458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_IncTick+0x1c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	001a      	movs	r2, r3
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x20>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	18d2      	adds	r2, r2, r3
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_IncTick+0x20>)
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	20000020 	.word	0x20000020
 8001478:	200000e8 	.word	0x200000e8

0800147c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b02      	ldr	r3, [pc, #8]	; (800148c <HAL_GetTick+0x10>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	0018      	movs	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	200000e8 	.word	0x200000e8

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff fff0 	bl	800147c <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3301      	adds	r3, #1
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	001a      	movs	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	189b      	adds	r3, r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	f7ff ffe0 	bl	800147c <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	20000020 	.word	0x20000020

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	0002      	movs	r2, r0
 80014e0:	1dfb      	adds	r3, r7, #7
 80014e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b7f      	cmp	r3, #127	; 0x7f
 80014ea:	d809      	bhi.n	8001500 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	001a      	movs	r2, r3
 80014f2:	231f      	movs	r3, #31
 80014f4:	401a      	ands	r2, r3
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_EnableIRQ+0x30>)
 80014f8:	2101      	movs	r1, #1
 80014fa:	4091      	lsls	r1, r2
 80014fc:	000a      	movs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
  }
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}
 8001508:	e000e100 	.word	0xe000e100

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	0002      	movs	r2, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d828      	bhi.n	8001574 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001522:	4a2f      	ldr	r2, [pc, #188]	; (80015e0 <__NVIC_SetPriority+0xd4>)
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b25b      	sxtb	r3, r3
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	33c0      	adds	r3, #192	; 0xc0
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	589b      	ldr	r3, [r3, r2]
 8001532:	1dfa      	adds	r2, r7, #7
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	0011      	movs	r1, r2
 8001538:	2203      	movs	r2, #3
 800153a:	400a      	ands	r2, r1
 800153c:	00d2      	lsls	r2, r2, #3
 800153e:	21ff      	movs	r1, #255	; 0xff
 8001540:	4091      	lsls	r1, r2
 8001542:	000a      	movs	r2, r1
 8001544:	43d2      	mvns	r2, r2
 8001546:	401a      	ands	r2, r3
 8001548:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	019b      	lsls	r3, r3, #6
 800154e:	22ff      	movs	r2, #255	; 0xff
 8001550:	401a      	ands	r2, r3
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	0018      	movs	r0, r3
 8001558:	2303      	movs	r3, #3
 800155a:	4003      	ands	r3, r0
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001560:	481f      	ldr	r0, [pc, #124]	; (80015e0 <__NVIC_SetPriority+0xd4>)
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b25b      	sxtb	r3, r3
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	430a      	orrs	r2, r1
 800156c:	33c0      	adds	r3, #192	; 0xc0
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001572:	e031      	b.n	80015d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001574:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <__NVIC_SetPriority+0xd8>)
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	0019      	movs	r1, r3
 800157c:	230f      	movs	r3, #15
 800157e:	400b      	ands	r3, r1
 8001580:	3b08      	subs	r3, #8
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3306      	adds	r3, #6
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	3304      	adds	r3, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	1dfa      	adds	r2, r7, #7
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	0011      	movs	r1, r2
 8001594:	2203      	movs	r2, #3
 8001596:	400a      	ands	r2, r1
 8001598:	00d2      	lsls	r2, r2, #3
 800159a:	21ff      	movs	r1, #255	; 0xff
 800159c:	4091      	lsls	r1, r2
 800159e:	000a      	movs	r2, r1
 80015a0:	43d2      	mvns	r2, r2
 80015a2:	401a      	ands	r2, r3
 80015a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	019b      	lsls	r3, r3, #6
 80015aa:	22ff      	movs	r2, #255	; 0xff
 80015ac:	401a      	ands	r2, r3
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	0018      	movs	r0, r3
 80015b4:	2303      	movs	r3, #3
 80015b6:	4003      	ands	r3, r0
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <__NVIC_SetPriority+0xd8>)
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	001c      	movs	r4, r3
 80015c4:	230f      	movs	r3, #15
 80015c6:	4023      	ands	r3, r4
 80015c8:	3b08      	subs	r3, #8
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	430a      	orrs	r2, r1
 80015ce:	3306      	adds	r3, #6
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	18c3      	adds	r3, r0, r3
 80015d4:	3304      	adds	r3, #4
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b003      	add	sp, #12
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	045b      	lsls	r3, r3, #17
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d301      	bcc.n	8001600 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fc:	2301      	movs	r3, #1
 80015fe:	e010      	b.n	8001622 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <SysTick_Config+0x44>)
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	3a01      	subs	r2, #1
 8001606:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001608:	2301      	movs	r3, #1
 800160a:	425b      	negs	r3, r3
 800160c:	2103      	movs	r1, #3
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff ff7c 	bl	800150c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x44>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x44>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	210f      	movs	r1, #15
 800163c:	187b      	adds	r3, r7, r1
 800163e:	1c02      	adds	r2, r0, #0
 8001640:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	187b      	adds	r3, r7, r1
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b25b      	sxtb	r3, r3
 800164a:	0011      	movs	r1, r2
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff ff5d 	bl	800150c <__NVIC_SetPriority>
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b004      	add	sp, #16
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	0002      	movs	r2, r0
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b25b      	sxtb	r3, r3
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff ff33 	bl	80014d8 <__NVIC_EnableIRQ>
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b002      	add	sp, #8
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff ffaf 	bl	80015e8 <SysTick_Config>
 800168a:	0003      	movs	r3, r0
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b002      	add	sp, #8
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e036      	b.n	8001718 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2221      	movs	r2, #33	; 0x21
 80016ae:	2102      	movs	r1, #2
 80016b0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_DMA_Init+0x8c>)
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 f8fa 	bl	80018f4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2221      	movs	r2, #33	; 0x21
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2220      	movs	r2, #32
 8001712:	2100      	movs	r1, #0
 8001714:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}  
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b004      	add	sp, #16
 800171e:	bd80      	pop	{r7, pc}
 8001720:	ffffc00f 	.word	0xffffc00f

08001724 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800172c:	210f      	movs	r1, #15
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2221      	movs	r2, #33	; 0x21
 8001738:	5c9b      	ldrb	r3, [r3, r2]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d006      	beq.n	800174e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2204      	movs	r2, #4
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e028      	b.n	80017a0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	210e      	movs	r1, #14
 800175a:	438a      	bics	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	438a      	bics	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001776:	2101      	movs	r1, #1
 8001778:	4091      	lsls	r1, r2
 800177a:	000a      	movs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2221      	movs	r2, #33	; 0x21
 8001782:	2101      	movs	r1, #1
 8001784:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2220      	movs	r2, #32
 800178a:	2100      	movs	r1, #0
 800178c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	0010      	movs	r0, r2
 800179e:	4798      	blx	r3
    } 
  }
  return status;
 80017a0:	230f      	movs	r3, #15
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	2204      	movs	r2, #4
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	d024      	beq.n	8001820 <HAL_DMA_IRQHandler+0x72>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2204      	movs	r2, #4
 80017da:	4013      	ands	r3, r2
 80017dc:	d020      	beq.n	8001820 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2220      	movs	r2, #32
 80017e6:	4013      	ands	r3, r2
 80017e8:	d107      	bne.n	80017fa <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2104      	movs	r1, #4
 80017f6:	438a      	bics	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	2104      	movs	r1, #4
 8001804:	4091      	lsls	r1, r2
 8001806:	000a      	movs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	2b00      	cmp	r3, #0
 8001810:	d100      	bne.n	8001814 <HAL_DMA_IRQHandler+0x66>
 8001812:	e06a      	b.n	80018ea <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	0010      	movs	r0, r2
 800181c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800181e:	e064      	b.n	80018ea <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	2202      	movs	r2, #2
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	d02b      	beq.n	8001888 <HAL_DMA_IRQHandler+0xda>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d027      	beq.n	8001888 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2220      	movs	r2, #32
 8001840:	4013      	ands	r3, r2
 8001842:	d10b      	bne.n	800185c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	210a      	movs	r1, #10
 8001850:	438a      	bics	r2, r1
 8001852:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2221      	movs	r2, #33	; 0x21
 8001858:	2101      	movs	r1, #1
 800185a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001864:	2102      	movs	r1, #2
 8001866:	4091      	lsls	r1, r2
 8001868:	000a      	movs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d036      	beq.n	80018ea <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	0010      	movs	r0, r2
 8001884:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001886:	e030      	b.n	80018ea <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	2208      	movs	r2, #8
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	d028      	beq.n	80018ea <HAL_DMA_IRQHandler+0x13c>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2208      	movs	r2, #8
 800189c:	4013      	ands	r3, r2
 800189e:	d024      	beq.n	80018ea <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	210e      	movs	r1, #14
 80018ac:	438a      	bics	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b8:	2101      	movs	r1, #1
 80018ba:	4091      	lsls	r1, r2
 80018bc:	000a      	movs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2221      	movs	r2, #33	; 0x21
 80018ca:	2101      	movs	r1, #1
 80018cc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	2100      	movs	r1, #0
 80018d4:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	0010      	movs	r0, r2
 80018e6:	4798      	blx	r3
    }
   }
}  
 80018e8:	e7ff      	b.n	80018ea <HAL_DMA_IRQHandler+0x13c>
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a08      	ldr	r2, [pc, #32]	; (8001924 <DMA_CalcBaseAndBitshift+0x30>)
 8001902:	4694      	mov	ip, r2
 8001904:	4463      	add	r3, ip
 8001906:	2114      	movs	r1, #20
 8001908:	0018      	movs	r0, r3
 800190a:	f7fe fbfd 	bl	8000108 <__udivsi3>
 800190e:	0003      	movs	r3, r0
 8001910:	009a      	lsls	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a03      	ldr	r2, [pc, #12]	; (8001928 <DMA_CalcBaseAndBitshift+0x34>)
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}
 8001924:	bffdfff8 	.word	0xbffdfff8
 8001928:	40020000 	.word	0x40020000

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	e14f      	b.n	8001bdc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4091      	lsls	r1, r2
 8001946:	000a      	movs	r2, r1
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d100      	bne.n	8001954 <HAL_GPIO_Init+0x28>
 8001952:	e140      	b.n	8001bd6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x38>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b12      	cmp	r3, #18
 8001962:	d123      	bne.n	80019ac <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	0092      	lsls	r2, r2, #2
 800196e:	58d3      	ldr	r3, [r2, r3]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2207      	movs	r2, #7
 8001976:	4013      	ands	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	409a      	lsls	r2, r3
 800197e:	0013      	movs	r3, r2
 8001980:	43da      	mvns	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2107      	movs	r1, #7
 8001990:	400b      	ands	r3, r1
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	409a      	lsls	r2, r3
 8001996:	0013      	movs	r3, r2
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	409a      	lsls	r2, r3
 80019ba:	0013      	movs	r3, r2
 80019bc:	43da      	mvns	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	409a      	lsls	r2, r3
 80019d2:	0013      	movs	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d00b      	beq.n	8001a00 <HAL_GPIO_Init+0xd4>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d007      	beq.n	8001a00 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f4:	2b11      	cmp	r3, #17
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b12      	cmp	r3, #18
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	0013      	movs	r3, r2
 8001a10:	43da      	mvns	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	409a      	lsls	r2, r3
 8001a22:	0013      	movs	r3, r2
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	0013      	movs	r3, r2
 8001a72:	43da      	mvns	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	055b      	lsls	r3, r3, #21
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d100      	bne.n	8001aa0 <HAL_GPIO_Init+0x174>
 8001a9e:	e09a      	b.n	8001bd6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa0:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_GPIO_Init+0x2c8>)
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_GPIO_Init+0x2c8>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	619a      	str	r2, [r3, #24]
 8001aac:	4b51      	ldr	r3, [pc, #324]	; (8001bf4 <HAL_GPIO_Init+0x2c8>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab8:	4a4f      	ldr	r2, [pc, #316]	; (8001bf8 <HAL_GPIO_Init+0x2cc>)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	589b      	ldr	r3, [r3, r2]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	4013      	ands	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	0013      	movs	r3, r2
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	2390      	movs	r3, #144	; 0x90
 8001ae0:	05db      	lsls	r3, r3, #23
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x1e2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a44      	ldr	r2, [pc, #272]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x1de>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a43      	ldr	r2, [pc, #268]	; (8001c00 <HAL_GPIO_Init+0x2d4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x1da>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a42      	ldr	r2, [pc, #264]	; (8001c04 <HAL_GPIO_Init+0x2d8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x1d6>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b02:	2305      	movs	r3, #5
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	2103      	movs	r1, #3
 8001b14:	400a      	ands	r2, r1
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x2cc>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2e:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43da      	mvns	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	025b      	lsls	r3, r3, #9
 8001b46:	4013      	ands	r3, r2
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43da      	mvns	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	029b      	lsls	r3, r3, #10
 8001b70:	4013      	ands	r3, r2
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	035b      	lsls	r3, r3, #13
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	039b      	lsls	r3, r3, #14
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	1e13      	subs	r3, r2, #0
 8001be6:	d000      	beq.n	8001bea <HAL_GPIO_Init+0x2be>
 8001be8:	e6a8      	b.n	800193c <HAL_GPIO_Init+0x10>
  } 
}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b006      	add	sp, #24
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	48000400 	.word	0x48000400
 8001c00:	48000800 	.word	0x48000800
 8001c04:	48000c00 	.word	0x48000c00
 8001c08:	40010400 	.word	0x40010400

08001c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	000a      	movs	r2, r1
 8001c16:	1cbb      	adds	r3, r7, #2
 8001c18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	1cba      	adds	r2, r7, #2
 8001c20:	8812      	ldrh	r2, [r2, #0]
 8001c22:	4013      	ands	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c26:	230f      	movs	r3, #15
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e003      	b.n	8001c38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c30:	230f      	movs	r3, #15
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c38:	230f      	movs	r3, #15
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	781b      	ldrb	r3, [r3, #0]
  }
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b004      	add	sp, #16
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	0008      	movs	r0, r1
 8001c50:	0011      	movs	r1, r2
 8001c52:	1cbb      	adds	r3, r7, #2
 8001c54:	1c02      	adds	r2, r0, #0
 8001c56:	801a      	strh	r2, [r3, #0]
 8001c58:	1c7b      	adds	r3, r7, #1
 8001c5a:	1c0a      	adds	r2, r1, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5e:	1c7b      	adds	r3, r7, #1
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c66:	1cbb      	adds	r3, r7, #2
 8001c68:	881a      	ldrh	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c6e:	e003      	b.n	8001c78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c70:	1cbb      	adds	r3, r7, #2
 8001c72:	881a      	ldrh	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e301      	b.n	8002296 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_OscConfig+0x1e>
 8001c9c:	e08d      	b.n	8001dba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c9e:	4bc3      	ldr	r3, [pc, #780]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d00e      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001caa:	4bc0      	ldr	r3, [pc, #768]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	220c      	movs	r2, #12
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x64>
 8001cb6:	4bbd      	ldr	r3, [pc, #756]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	025b      	lsls	r3, r3, #9
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	025b      	lsls	r3, r3, #9
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	4bb8      	ldr	r3, [pc, #736]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d100      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x56>
 8001cd4:	e070      	b.n	8001db8 <HAL_RCC_OscConfig+0x138>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d000      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x60>
 8001cde:	e06b      	b.n	8001db8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e2d8      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_OscConfig+0x7c>
 8001cec:	4baf      	ldr	r3, [pc, #700]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4bae      	ldr	r3, [pc, #696]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	0249      	lsls	r1, r1, #9
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e02f      	b.n	8001d5c <HAL_RCC_OscConfig+0xdc>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x9e>
 8001d04:	4ba9      	ldr	r3, [pc, #676]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4ba8      	ldr	r3, [pc, #672]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	49a9      	ldr	r1, [pc, #676]	; (8001fb0 <HAL_RCC_OscConfig+0x330>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	4ba6      	ldr	r3, [pc, #664]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4ba5      	ldr	r3, [pc, #660]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d16:	49a7      	ldr	r1, [pc, #668]	; (8001fb4 <HAL_RCC_OscConfig+0x334>)
 8001d18:	400a      	ands	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e01e      	b.n	8001d5c <HAL_RCC_OscConfig+0xdc>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d10e      	bne.n	8001d44 <HAL_RCC_OscConfig+0xc4>
 8001d26:	4ba1      	ldr	r3, [pc, #644]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4ba0      	ldr	r3, [pc, #640]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	02c9      	lsls	r1, r1, #11
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	4b9d      	ldr	r3, [pc, #628]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b9c      	ldr	r3, [pc, #624]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	0249      	lsls	r1, r1, #9
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0xdc>
 8001d44:	4b99      	ldr	r3, [pc, #612]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b98      	ldr	r3, [pc, #608]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d4a:	4999      	ldr	r1, [pc, #612]	; (8001fb0 <HAL_RCC_OscConfig+0x330>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	4b96      	ldr	r3, [pc, #600]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b95      	ldr	r3, [pc, #596]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d56:	4997      	ldr	r1, [pc, #604]	; (8001fb4 <HAL_RCC_OscConfig+0x334>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d014      	beq.n	8001d8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fb8a 	bl	800147c <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d6e:	f7ff fb85 	bl	800147c <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e28a      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d80:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0xee>
 8001d8c:	e015      	b.n	8001dba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fb75 	bl	800147c <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fb70 	bl	800147c <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e275      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	4b80      	ldr	r3, [pc, #512]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	029b      	lsls	r3, r3, #10
 8001db2:	4013      	ands	r3, r2
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x118>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d100      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x146>
 8001dc4:	e069      	b.n	8001e9a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	220c      	movs	r2, #12
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d00b      	beq.n	8001de8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dd0:	4b76      	ldr	r3, [pc, #472]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d11c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x196>
 8001ddc:	4b73      	ldr	r3, [pc, #460]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	025b      	lsls	r3, r3, #9
 8001de4:	4013      	ands	r3, r2
 8001de6:	d116      	bne.n	8001e16 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de8:	4b70      	ldr	r3, [pc, #448]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2202      	movs	r2, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x17e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e24b      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b6b      	ldr	r3, [pc, #428]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	22f8      	movs	r2, #248	; 0xf8
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	00da      	lsls	r2, r3, #3
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e14:	e041      	b.n	8001e9a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d024      	beq.n	8001e68 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b62      	ldr	r3, [pc, #392]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e24:	2101      	movs	r1, #1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fb27 	bl	800147c <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff fb22 	bl	800147c <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e227      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	4b59      	ldr	r3, [pc, #356]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d0f1      	beq.n	8001e34 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b56      	ldr	r3, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	22f8      	movs	r2, #248	; 0xf8
 8001e56:	4393      	bics	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00da      	lsls	r2, r3, #3
 8001e60:	4b52      	ldr	r3, [pc, #328]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e018      	b.n	8001e9a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e68:	4b50      	ldr	r3, [pc, #320]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fb02 	bl	800147c <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fafd 	bl	800147c <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e202      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d1f1      	bne.n	8001e7e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d036      	beq.n	8001f12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d019      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eac:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fae0 	bl	800147c <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fadb 	bl	800147c <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1e0      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed4:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d0f1      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x242>
 8001ede:	e018      	b.n	8001f12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee0:	4b32      	ldr	r3, [pc, #200]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	438a      	bics	r2, r1
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eec:	f7ff fac6 	bl	800147c <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7ff fac1 	bl	800147c <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1c6      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f08:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d1f1      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2204      	movs	r2, #4
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <HAL_RCC_OscConfig+0x29e>
 8001f1c:	e0b4      	b.n	8002088 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	201f      	movs	r0, #31
 8001f20:	183b      	adds	r3, r7, r0
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	055b      	lsls	r3, r3, #21
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d110      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0549      	lsls	r1, r1, #21
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	61da      	str	r2, [r3, #28]
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	055b      	lsls	r3, r3, #21
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d11a      	bne.n	8001f96 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	0049      	lsls	r1, r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fa85 	bl	800147c <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f78:	f7ff fa80 	bl	800147c <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e185      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10e      	bne.n	8001fbc <HAL_RCC_OscConfig+0x33c>
 8001f9e:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	4b02      	ldr	r3, [pc, #8]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	621a      	str	r2, [r3, #32]
 8001faa:	e035      	b.n	8002018 <HAL_RCC_OscConfig+0x398>
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	fffeffff 	.word	0xfffeffff
 8001fb4:	fffbffff 	.word	0xfffbffff
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x35e>
 8001fc4:	4bb6      	ldr	r3, [pc, #728]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	4bb5      	ldr	r3, [pc, #724]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	438a      	bics	r2, r1
 8001fce:	621a      	str	r2, [r3, #32]
 8001fd0:	4bb3      	ldr	r3, [pc, #716]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fd2:	6a1a      	ldr	r2, [r3, #32]
 8001fd4:	4bb2      	ldr	r3, [pc, #712]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	438a      	bics	r2, r1
 8001fda:	621a      	str	r2, [r3, #32]
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x398>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x380>
 8001fe6:	4bae      	ldr	r3, [pc, #696]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fe8:	6a1a      	ldr	r2, [r3, #32]
 8001fea:	4bad      	ldr	r3, [pc, #692]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fec:	2104      	movs	r1, #4
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	621a      	str	r2, [r3, #32]
 8001ff2:	4bab      	ldr	r3, [pc, #684]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001ff4:	6a1a      	ldr	r2, [r3, #32]
 8001ff6:	4baa      	ldr	r3, [pc, #680]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	621a      	str	r2, [r3, #32]
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0x398>
 8002000:	4ba7      	ldr	r3, [pc, #668]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002002:	6a1a      	ldr	r2, [r3, #32]
 8002004:	4ba6      	ldr	r3, [pc, #664]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002006:	2101      	movs	r1, #1
 8002008:	438a      	bics	r2, r1
 800200a:	621a      	str	r2, [r3, #32]
 800200c:	4ba4      	ldr	r3, [pc, #656]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800200e:	6a1a      	ldr	r2, [r3, #32]
 8002010:	4ba3      	ldr	r3, [pc, #652]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002012:	2104      	movs	r1, #4
 8002014:	438a      	bics	r2, r1
 8002016:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d014      	beq.n	800204a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7ff fa2c 	bl	800147c <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	e009      	b.n	800203e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7ff fa27 	bl	800147c <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	4a9b      	ldr	r2, [pc, #620]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e12b      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203e:	4b98      	ldr	r3, [pc, #608]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	2202      	movs	r2, #2
 8002044:	4013      	ands	r3, r2
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x3aa>
 8002048:	e013      	b.n	8002072 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7ff fa17 	bl	800147c <HAL_GetTick>
 800204e:	0003      	movs	r3, r0
 8002050:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002052:	e009      	b.n	8002068 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7ff fa12 	bl	800147c <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	4a91      	ldr	r2, [pc, #580]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e116      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	4b8d      	ldr	r3, [pc, #564]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002072:	231f      	movs	r3, #31
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207c:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	4b87      	ldr	r3, [pc, #540]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002082:	4989      	ldr	r1, [pc, #548]	; (80022a8 <HAL_RCC_OscConfig+0x628>)
 8002084:	400a      	ands	r2, r1
 8002086:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2210      	movs	r2, #16
 800208e:	4013      	ands	r3, r2
 8002090:	d063      	beq.n	800215a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d12a      	bne.n	80020f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800209a:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800209c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209e:	4b80      	ldr	r3, [pc, #512]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020a0:	2104      	movs	r1, #4
 80020a2:	430a      	orrs	r2, r1
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020a6:	4b7e      	ldr	r3, [pc, #504]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020aa:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020ac:	2101      	movs	r1, #1
 80020ae:	430a      	orrs	r2, r1
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7ff f9e3 	bl	800147c <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020bc:	f7ff f9de 	bl	800147c <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0e3      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ce:	4b74      	ldr	r3, [pc, #464]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d0f1      	beq.n	80020bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020d8:	4b71      	ldr	r3, [pc, #452]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020dc:	22f8      	movs	r2, #248	; 0xf8
 80020de:	4393      	bics	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	00da      	lsls	r2, r3, #3
 80020e8:	4b6d      	ldr	r3, [pc, #436]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	635a      	str	r2, [r3, #52]	; 0x34
 80020ee:	e034      	b.n	800215a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	3305      	adds	r3, #5
 80020f6:	d111      	bne.n	800211c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020f8:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fc:	4b68      	ldr	r3, [pc, #416]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020fe:	2104      	movs	r1, #4
 8002100:	438a      	bics	r2, r1
 8002102:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002104:	4b66      	ldr	r3, [pc, #408]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	22f8      	movs	r2, #248	; 0xf8
 800210a:	4393      	bics	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	00da      	lsls	r2, r3, #3
 8002114:	4b62      	ldr	r3, [pc, #392]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002116:	430a      	orrs	r2, r1
 8002118:	635a      	str	r2, [r3, #52]	; 0x34
 800211a:	e01e      	b.n	800215a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800211c:	4b60      	ldr	r3, [pc, #384]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800211e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002122:	2104      	movs	r1, #4
 8002124:	430a      	orrs	r2, r1
 8002126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002128:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800212a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212c:	4b5c      	ldr	r3, [pc, #368]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800212e:	2101      	movs	r1, #1
 8002130:	438a      	bics	r2, r1
 8002132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7ff f9a2 	bl	800147c <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800213e:	f7ff f99d 	bl	800147c <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0a2      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002154:	2202      	movs	r2, #2
 8002156:	4013      	ands	r3, r2
 8002158:	d1f1      	bne.n	800213e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d100      	bne.n	8002164 <HAL_RCC_OscConfig+0x4e4>
 8002162:	e097      	b.n	8002294 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002164:	4b4e      	ldr	r3, [pc, #312]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	220c      	movs	r2, #12
 800216a:	4013      	ands	r3, r2
 800216c:	2b08      	cmp	r3, #8
 800216e:	d100      	bne.n	8002172 <HAL_RCC_OscConfig+0x4f2>
 8002170:	e06b      	b.n	800224a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d14c      	bne.n	8002214 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b49      	ldr	r3, [pc, #292]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002180:	494a      	ldr	r1, [pc, #296]	; (80022ac <HAL_RCC_OscConfig+0x62c>)
 8002182:	400a      	ands	r2, r1
 8002184:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7ff f979 	bl	800147c <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff f974 	bl	800147c <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e079      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	049b      	lsls	r3, r3, #18
 80021aa:	4013      	ands	r3, r2
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	220f      	movs	r2, #15
 80021b4:	4393      	bics	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_RCC_OscConfig+0x630>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	431a      	orrs	r2, r3
 80021d6:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021d8:	430a      	orrs	r2, r1
 80021da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021dc:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0449      	lsls	r1, r1, #17
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff f947 	bl	800147c <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff f942 	bl	800147c <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e047      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	049b      	lsls	r3, r3, #18
 800220e:	4013      	ands	r3, r2
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x574>
 8002212:	e03f      	b.n	8002294 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800221a:	4924      	ldr	r1, [pc, #144]	; (80022ac <HAL_RCC_OscConfig+0x62c>)
 800221c:	400a      	ands	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff f92c 	bl	800147c <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222a:	f7ff f927 	bl	800147c <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e02c      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	049b      	lsls	r3, r3, #18
 8002244:	4013      	ands	r3, r2
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x5aa>
 8002248:	e024      	b.n	8002294 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e01f      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	025b      	lsls	r3, r3, #9
 8002268:	401a      	ands	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	429a      	cmp	r2, r3
 8002270:	d10e      	bne.n	8002290 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	220f      	movs	r2, #15
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d107      	bne.n	8002290 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	23f0      	movs	r3, #240	; 0xf0
 8002284:	039b      	lsls	r3, r3, #14
 8002286:	401a      	ands	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b008      	add	sp, #32
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	40021000 	.word	0x40021000
 80022a4:	00001388 	.word	0x00001388
 80022a8:	efffffff 	.word	0xefffffff
 80022ac:	feffffff 	.word	0xfeffffff
 80022b0:	ffc2ffff 	.word	0xffc2ffff

080022b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b3      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	4013      	ands	r3, r2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d911      	bls.n	80022fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b58      	ldr	r3, [pc, #352]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2201      	movs	r2, #1
 80022dc:	4393      	bics	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	4b55      	ldr	r3, [pc, #340]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2201      	movs	r2, #1
 80022ee:	4013      	ands	r3, r2
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e09a      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2202      	movs	r2, #2
 8002300:	4013      	ands	r3, r2
 8002302:	d015      	beq.n	8002330 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2204      	movs	r2, #4
 800230a:	4013      	ands	r3, r2
 800230c:	d006      	beq.n	800231c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800230e:	4b4b      	ldr	r3, [pc, #300]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002314:	21e0      	movs	r1, #224	; 0xe0
 8002316:	00c9      	lsls	r1, r1, #3
 8002318:	430a      	orrs	r2, r1
 800231a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	22f0      	movs	r2, #240	; 0xf0
 8002322:	4393      	bics	r3, r2
 8002324:	0019      	movs	r1, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	4b44      	ldr	r3, [pc, #272]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 800232c:	430a      	orrs	r2, r1
 800232e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	d040      	beq.n	80023bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	4013      	ands	r3, r2
 800234c:	d114      	bne.n	8002378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06e      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	049b      	lsls	r3, r3, #18
 8002362:	4013      	ands	r3, r2
 8002364:	d108      	bne.n	8002378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e062      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	4b34      	ldr	r3, [pc, #208]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e05b      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2203      	movs	r2, #3
 800237e:	4393      	bics	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800238c:	f7ff f876 	bl	800147c <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002394:	e009      	b.n	80023aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002396:	f7ff f871 	bl	800147c <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_RCC_ClockConfig+0x18c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e042      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	220c      	movs	r2, #12
 80023b0:	401a      	ands	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1ec      	bne.n	8002396 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d211      	bcs.n	80023ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e020      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2204      	movs	r2, #4
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_RCC_ClockConfig+0x190>)
 80023fe:	4013      	ands	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800240c:	f000 f820 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 8002410:	0001      	movs	r1, r0
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	220f      	movs	r2, #15
 800241a:	4013      	ands	r3, r2
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <HAL_RCC_ClockConfig+0x194>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	000a      	movs	r2, r1
 8002422:	40da      	lsrs	r2, r3
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x198>)
 8002426:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002428:	2003      	movs	r0, #3
 800242a:	f7fe ffe1 	bl	80013f0 <HAL_InitTick>
  
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40022000 	.word	0x40022000
 800243c:	40021000 	.word	0x40021000
 8002440:	00001388 	.word	0x00001388
 8002444:	fffff8ff 	.word	0xfffff8ff
 8002448:	080093cc 	.word	0x080093cc
 800244c:	20000018 	.word	0x20000018

08002450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b08f      	sub	sp, #60	; 0x3c
 8002454:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002456:	2314      	movs	r3, #20
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	4a2b      	ldr	r2, [pc, #172]	; (8002508 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800245e:	c313      	stmia	r3!, {r0, r1, r4}
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	4a29      	ldr	r2, [pc, #164]	; (800250c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002468:	ca13      	ldmia	r2!, {r0, r1, r4}
 800246a:	c313      	stmia	r3!, {r0, r1, r4}
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002474:	2300      	movs	r3, #0
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
 8002478:	2300      	movs	r3, #0
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	220c      	movs	r2, #12
 800248e:	4013      	ands	r3, r2
 8002490:	2b04      	cmp	r3, #4
 8002492:	d002      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x4a>
 8002494:	2b08      	cmp	r3, #8
 8002496:	d003      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x50>
 8002498:	e02d      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <HAL_RCC_GetSysClockFreq+0xc4>)
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800249e:	e02d      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	0c9b      	lsrs	r3, r3, #18
 80024a4:	220f      	movs	r2, #15
 80024a6:	4013      	ands	r3, r2
 80024a8:	2214      	movs	r2, #20
 80024aa:	18ba      	adds	r2, r7, r2
 80024ac:	5cd3      	ldrb	r3, [r2, r3]
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	220f      	movs	r2, #15
 80024b6:	4013      	ands	r3, r2
 80024b8:	1d3a      	adds	r2, r7, #4
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	025b      	lsls	r3, r3, #9
 80024c4:	4013      	ands	r3, r2
 80024c6:	d009      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ca:	4812      	ldr	r0, [pc, #72]	; (8002514 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024cc:	f7fd fe1c 	bl	8000108 <__udivsi3>
 80024d0:	0003      	movs	r3, r0
 80024d2:	001a      	movs	r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	4353      	muls	r3, r2
 80024d8:	637b      	str	r3, [r7, #52]	; 0x34
 80024da:	e009      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024de:	000a      	movs	r2, r1
 80024e0:	0152      	lsls	r2, r2, #5
 80024e2:	1a52      	subs	r2, r2, r1
 80024e4:	0193      	lsls	r3, r2, #6
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	185b      	adds	r3, r3, r1
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024f4:	e002      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b00f      	add	sp, #60	; 0x3c
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	08002f98 	.word	0x08002f98
 800250c:	08002fa8 	.word	0x08002fa8
 8002510:	40021000 	.word	0x40021000
 8002514:	007a1200 	.word	0x007a1200

08002518 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e08a      	b.n	8002640 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	225d      	movs	r2, #93	; 0x5d
 8002534:	5c9b      	ldrb	r3, [r3, r2]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	225c      	movs	r2, #92	; 0x5c
 8002540:	2100      	movs	r1, #0
 8002542:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	0018      	movs	r0, r3
 8002548:	f7fe fe60 	bl	800120c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	225d      	movs	r2, #93	; 0x5d
 8002550:	2102      	movs	r1, #2
 8002552:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	438a      	bics	r2, r1
 8002562:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	23e0      	movs	r3, #224	; 0xe0
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	429a      	cmp	r2, r3
 800256e:	d902      	bls.n	8002576 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e002      	b.n	800257c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	015b      	lsls	r3, r3, #5
 800257a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	23f0      	movs	r3, #240	; 0xf0
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	429a      	cmp	r2, r3
 8002586:	d008      	beq.n	800259a <HAL_SPI_Init+0x82>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	23e0      	movs	r3, #224	; 0xe0
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	429a      	cmp	r2, r3
 8002592:	d002      	beq.n	800259a <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	23e0      	movs	r3, #224	; 0xe0
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d903      	bls.n	80025b6 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
 80025b4:	e002      	b.n	80025bc <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6999      	ldr	r1, [r3, #24]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	400b      	ands	r3, r1
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	0011      	movs	r1, r2
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	2204      	movs	r2, #4
 8002600:	401a      	ands	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	431a      	orrs	r2, r3
 8002614:	0011      	movs	r1, r2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	430a      	orrs	r2, r1
 800261e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4907      	ldr	r1, [pc, #28]	; (8002648 <HAL_SPI_Init+0x130>)
 800262c:	400a      	ands	r2, r1
 800262e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	225d      	movs	r2, #93	; 0x5d
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b004      	add	sp, #16
 8002646:	bd80      	pop	{r7, pc}
 8002648:	fffff7ff 	.word	0xfffff7ff

0800264c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	1dbb      	adds	r3, r7, #6
 800265a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800265c:	231f      	movs	r3, #31
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	225c      	movs	r2, #92	; 0x5c
 8002668:	5c9b      	ldrb	r3, [r3, r2]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_SPI_Transmit+0x26>
 800266e:	2302      	movs	r3, #2
 8002670:	e169      	b.n	8002946 <HAL_SPI_Transmit+0x2fa>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	225c      	movs	r2, #92	; 0x5c
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800267a:	f7fe feff 	bl	800147c <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002682:	2316      	movs	r3, #22
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	1dba      	adds	r2, r7, #6
 8002688:	8812      	ldrh	r2, [r2, #0]
 800268a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	225d      	movs	r2, #93	; 0x5d
 8002690:	5c9b      	ldrb	r3, [r3, r2]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d004      	beq.n	80026a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002698:	231f      	movs	r3, #31
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]
    goto error;
 80026a0:	e146      	b.n	8002930 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_SPI_Transmit+0x64>
 80026a8:	1dbb      	adds	r3, r7, #6
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d104      	bne.n	80026ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80026b0:	231f      	movs	r3, #31
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80026b8:	e13a      	b.n	8002930 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	225d      	movs	r2, #93	; 0x5d
 80026be:	2103      	movs	r1, #3
 80026c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1dba      	adds	r2, r7, #6
 80026d2:	8812      	ldrh	r2, [r2, #0]
 80026d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1dba      	adds	r2, r7, #6
 80026da:	8812      	ldrh	r2, [r2, #0]
 80026dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2244      	movs	r2, #68	; 0x44
 80026e8:	2100      	movs	r1, #0
 80026ea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2246      	movs	r2, #70	; 0x46
 80026f0:	2100      	movs	r1, #0
 80026f2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	429a      	cmp	r2, r3
 800270a:	d108      	bne.n	800271e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	01c9      	lsls	r1, r1, #7
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2240      	movs	r2, #64	; 0x40
 8002726:	4013      	ands	r3, r2
 8002728:	2b40      	cmp	r3, #64	; 0x40
 800272a:	d007      	beq.n	800273c <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2140      	movs	r1, #64	; 0x40
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	23e0      	movs	r3, #224	; 0xe0
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	429a      	cmp	r2, r3
 8002746:	d94e      	bls.n	80027e6 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_SPI_Transmit+0x10e>
 8002750:	2316      	movs	r3, #22
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d13f      	bne.n	80027da <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	881a      	ldrh	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	1c9a      	adds	r2, r3, #2
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800277e:	e02c      	b.n	80027da <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2202      	movs	r2, #2
 8002788:	4013      	ands	r3, r2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d112      	bne.n	80027b4 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	881a      	ldrh	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	1c9a      	adds	r2, r3, #2
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027b2:	e012      	b.n	80027da <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027b4:	f7fe fe62 	bl	800147c <HAL_GetTick>
 80027b8:	0002      	movs	r2, r0
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d802      	bhi.n	80027ca <HAL_SPI_Transmit+0x17e>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_SPI_Transmit+0x184>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d104      	bne.n	80027da <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80027d0:	231f      	movs	r3, #31
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2203      	movs	r2, #3
 80027d6:	701a      	strb	r2, [r3, #0]
          goto error;
 80027d8:	e0aa      	b.n	8002930 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1cd      	bne.n	8002780 <HAL_SPI_Transmit+0x134>
 80027e4:	e080      	b.n	80028e8 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_SPI_Transmit+0x1ae>
 80027ee:	2316      	movs	r3, #22
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d000      	beq.n	80027fa <HAL_SPI_Transmit+0x1ae>
 80027f8:	e071      	b.n	80028de <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d912      	bls.n	800282a <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	881a      	ldrh	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	1c9a      	adds	r2, r3, #2
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b02      	subs	r3, #2
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002828:	e059      	b.n	80028de <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	7812      	ldrb	r2, [r2, #0]
 8002836:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002850:	e045      	b.n	80028de <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2202      	movs	r2, #2
 800285a:	4013      	ands	r3, r2
 800285c:	2b02      	cmp	r3, #2
 800285e:	d12b      	bne.n	80028b8 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d912      	bls.n	8002890 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	1c9a      	adds	r2, r3, #2
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b02      	subs	r3, #2
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800288e:	e026      	b.n	80028de <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	330c      	adds	r3, #12
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028b6:	e012      	b.n	80028de <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028b8:	f7fe fde0 	bl	800147c <HAL_GetTick>
 80028bc:	0002      	movs	r2, r0
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d802      	bhi.n	80028ce <HAL_SPI_Transmit+0x282>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	3301      	adds	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_SPI_Transmit+0x288>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d104      	bne.n	80028de <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 80028d4:	231f      	movs	r3, #31
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	2203      	movs	r2, #3
 80028da:	701a      	strb	r2, [r3, #0]
          goto error;
 80028dc:	e028      	b.n	8002930 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1b4      	bne.n	8002852 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	6839      	ldr	r1, [r7, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 fa2e 	bl	8002d50 <SPI_EndRxTxTransaction>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d002      	beq.n	80028fe <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8002924:	231f      	movs	r3, #31
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	e000      	b.n	8002930 <HAL_SPI_Transmit+0x2e4>
  }

error:
 800292e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	225d      	movs	r2, #93	; 0x5d
 8002934:	2101      	movs	r1, #1
 8002936:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	225c      	movs	r2, #92	; 0x5c
 800293c:	2100      	movs	r1, #0
 800293e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002940:	231f      	movs	r3, #31
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	781b      	ldrb	r3, [r3, #0]
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b008      	add	sp, #32
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	001a      	movs	r2, r3
 800296e:	2301      	movs	r3, #1
 8002970:	4013      	ands	r3, r2
 8002972:	d10f      	bne.n	8002994 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2201      	movs	r2, #1
 8002978:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800297a:	d00b      	beq.n	8002994 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	001a      	movs	r2, r3
 8002982:	2301      	movs	r3, #1
 8002984:	4013      	ands	r3, r2
 8002986:	d005      	beq.n	8002994 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	0010      	movs	r0, r2
 8002990:	4798      	blx	r3
    return;
 8002992:	e0d5      	b.n	8002b40 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	001a      	movs	r2, r3
 800299a:	2301      	movs	r3, #1
 800299c:	4013      	ands	r3, r2
 800299e:	d00b      	beq.n	80029b8 <HAL_SPI_IRQHandler+0x68>
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	09db      	lsrs	r3, r3, #7
 80029a4:	001a      	movs	r2, r3
 80029a6:	2301      	movs	r3, #1
 80029a8:	4013      	ands	r3, r2
 80029aa:	d005      	beq.n	80029b8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	0010      	movs	r0, r2
 80029b4:	4798      	blx	r3
    return;
 80029b6:	e0c3      	b.n	8002b40 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	001a      	movs	r2, r3
 80029be:	2301      	movs	r3, #1
 80029c0:	4013      	ands	r3, r2
 80029c2:	d10c      	bne.n	80029de <HAL_SPI_IRQHandler+0x8e>
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	099b      	lsrs	r3, r3, #6
 80029c8:	001a      	movs	r2, r3
 80029ca:	2301      	movs	r3, #1
 80029cc:	4013      	ands	r3, r2
 80029ce:	d106      	bne.n	80029de <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	001a      	movs	r2, r3
 80029d6:	2301      	movs	r3, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	d100      	bne.n	80029de <HAL_SPI_IRQHandler+0x8e>
 80029dc:	e0b0      	b.n	8002b40 <HAL_SPI_IRQHandler+0x1f0>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	001a      	movs	r2, r3
 80029e4:	2301      	movs	r3, #1
 80029e6:	4013      	ands	r3, r2
 80029e8:	d100      	bne.n	80029ec <HAL_SPI_IRQHandler+0x9c>
 80029ea:	e0a9      	b.n	8002b40 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	001a      	movs	r2, r3
 80029f2:	2301      	movs	r3, #1
 80029f4:	4013      	ands	r3, r2
 80029f6:	d023      	beq.n	8002a40 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	225d      	movs	r2, #93	; 0x5d
 80029fc:	5c9b      	ldrb	r3, [r3, r2]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d011      	beq.n	8002a28 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a08:	2204      	movs	r2, #4
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	e00b      	b.n	8002a40 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
        return;
 8002a3e:	e07f      	b.n	8002b40 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	001a      	movs	r2, r3
 8002a46:	2301      	movs	r3, #1
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d014      	beq.n	8002a76 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a50:	2201      	movs	r2, #1
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	438a      	bics	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	001a      	movs	r2, r3
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d00c      	beq.n	8002a9c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a86:	2208      	movs	r2, #8
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d04c      	beq.n	8002b3e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	21e0      	movs	r1, #224	; 0xe0
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	225d      	movs	r2, #93	; 0x5d
 8002ab8:	2101      	movs	r1, #1
 8002aba:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d103      	bne.n	8002acc <HAL_SPI_IRQHandler+0x17c>
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d032      	beq.n	8002b32 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2103      	movs	r1, #3
 8002ad8:	438a      	bics	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <HAL_SPI_IRQHandler+0x1f8>)
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7fe fe17 	bl	8001724 <HAL_DMA_Abort_IT>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	2240      	movs	r2, #64	; 0x40
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <HAL_SPI_IRQHandler+0x1f8>)
 8002b14:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7fe fe02 	bl	8001724 <HAL_DMA_Abort_IT>
 8002b20:	1e03      	subs	r3, r0, #0
 8002b22:	d00b      	beq.n	8002b3c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b28:	2240      	movs	r2, #64	; 0x40
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002b30:	e004      	b.n	8002b3c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 f809 	bl	8002b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b3a:	e000      	b.n	8002b3e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002b3c:	46c0      	nop			; (mov r8, r8)
    return;
 8002b3e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b008      	add	sp, #32
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	08002b5d 	.word	0x08002b5d

08002b4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2246      	movs	r2, #70	; 0x46
 8002b6e:	2100      	movs	r1, #0
 8002b70:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7ff ffe6 	bl	8002b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b004      	add	sp, #16
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b98:	e050      	b.n	8002c3c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	d04d      	beq.n	8002c3c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002ba0:	f7fe fc6c 	bl	800147c <HAL_GetTick>
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d902      	bls.n	8002bb6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d142      	bne.n	8002c3c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	21e0      	movs	r1, #224	; 0xe0
 8002bc2:	438a      	bics	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	2382      	movs	r3, #130	; 0x82
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d113      	bne.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0x72>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d005      	beq.n	8002bea <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d107      	bne.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2140      	movs	r1, #64	; 0x40
 8002bf6:	438a      	bics	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d110      	bne.n	8002c28 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4914      	ldr	r1, [pc, #80]	; (8002c64 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002c12:	400a      	ands	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	0189      	lsls	r1, r1, #6
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	225d      	movs	r2, #93	; 0x5d
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	225c      	movs	r2, #92	; 0x5c
 8002c34:	2100      	movs	r1, #0
 8002c36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e00f      	b.n	8002c5c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	4013      	ands	r3, r2
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	425a      	negs	r2, r3
 8002c4c:	4153      	adcs	r3, r2
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	001a      	movs	r2, r3
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d19f      	bne.n	8002b9a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b004      	add	sp, #16
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	ffffdfff 	.word	0xffffdfff

08002c68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c76:	e05c      	b.n	8002d32 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	23c0      	movs	r3, #192	; 0xc0
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d106      	bne.n	8002c90 <SPI_WaitFifoStateUntilTimeout+0x28>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d103      	bne.n	8002c90 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	3301      	adds	r3, #1
 8002c94:	d04d      	beq.n	8002d32 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002c96:	f7fe fbf1 	bl	800147c <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d902      	bls.n	8002cac <SPI_WaitFifoStateUntilTimeout+0x44>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d142      	bne.n	8002d32 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	21e0      	movs	r1, #224	; 0xe0
 8002cb8:	438a      	bics	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	2382      	movs	r3, #130	; 0x82
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d113      	bne.n	8002cf0 <SPI_WaitFifoStateUntilTimeout+0x88>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d005      	beq.n	8002ce0 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d107      	bne.n	8002cf0 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2140      	movs	r1, #64	; 0x40
 8002cec:	438a      	bics	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	019b      	lsls	r3, r3, #6
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d110      	bne.n	8002d1e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4911      	ldr	r1, [pc, #68]	; (8002d4c <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8002d08:	400a      	ands	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	0189      	lsls	r1, r1, #6
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	225d      	movs	r2, #93	; 0x5d
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	225c      	movs	r2, #92	; 0x5c
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e008      	b.n	8002d44 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d19a      	bne.n	8002c78 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b004      	add	sp, #16
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	ffffdfff 	.word	0xffffdfff

08002d50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	23c0      	movs	r3, #192	; 0xc0
 8002d60:	0159      	lsls	r1, r3, #5
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	0013      	movs	r3, r2
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f7ff ff7c 	bl	8002c68 <SPI_WaitFifoStateUntilTimeout>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d007      	beq.n	8002d84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d78:	2220      	movs	r2, #32
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e027      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	0013      	movs	r3, r2
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	f7ff fef9 	bl	8002b88 <SPI_WaitFlagStateUntilTimeout>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d007      	beq.n	8002daa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9e:	2220      	movs	r2, #32
 8002da0:	431a      	orrs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e014      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	23c0      	movs	r3, #192	; 0xc0
 8002dae:	00d9      	lsls	r1, r3, #3
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	0013      	movs	r3, r2
 8002db8:	2200      	movs	r2, #0
 8002dba:	f7ff ff55 	bl	8002c68 <SPI_WaitFifoStateUntilTimeout>
 8002dbe:	1e03      	subs	r3, r0, #0
 8002dc0:	d007      	beq.n	8002dd2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e000      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <__libc_init_array>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	2600      	movs	r6, #0
 8002de0:	4d0c      	ldr	r5, [pc, #48]	; (8002e14 <__libc_init_array+0x38>)
 8002de2:	4c0d      	ldr	r4, [pc, #52]	; (8002e18 <__libc_init_array+0x3c>)
 8002de4:	1b64      	subs	r4, r4, r5
 8002de6:	10a4      	asrs	r4, r4, #2
 8002de8:	42a6      	cmp	r6, r4
 8002dea:	d109      	bne.n	8002e00 <__libc_init_array+0x24>
 8002dec:	2600      	movs	r6, #0
 8002dee:	f000 f821 	bl	8002e34 <_init>
 8002df2:	4d0a      	ldr	r5, [pc, #40]	; (8002e1c <__libc_init_array+0x40>)
 8002df4:	4c0a      	ldr	r4, [pc, #40]	; (8002e20 <__libc_init_array+0x44>)
 8002df6:	1b64      	subs	r4, r4, r5
 8002df8:	10a4      	asrs	r4, r4, #2
 8002dfa:	42a6      	cmp	r6, r4
 8002dfc:	d105      	bne.n	8002e0a <__libc_init_array+0x2e>
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}
 8002e00:	00b3      	lsls	r3, r6, #2
 8002e02:	58eb      	ldr	r3, [r5, r3]
 8002e04:	4798      	blx	r3
 8002e06:	3601      	adds	r6, #1
 8002e08:	e7ee      	b.n	8002de8 <__libc_init_array+0xc>
 8002e0a:	00b3      	lsls	r3, r6, #2
 8002e0c:	58eb      	ldr	r3, [r5, r3]
 8002e0e:	4798      	blx	r3
 8002e10:	3601      	adds	r6, #1
 8002e12:	e7f2      	b.n	8002dfa <__libc_init_array+0x1e>
 8002e14:	080093dc 	.word	0x080093dc
 8002e18:	080093dc 	.word	0x080093dc
 8002e1c:	080093dc 	.word	0x080093dc
 8002e20:	080093e0 	.word	0x080093e0

08002e24 <memset>:
 8002e24:	0003      	movs	r3, r0
 8002e26:	1882      	adds	r2, r0, r2
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <memset+0xa>
 8002e2c:	4770      	bx	lr
 8002e2e:	7019      	strb	r1, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	e7f9      	b.n	8002e28 <memset+0x4>

08002e34 <_init>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr

08002e40 <_fini>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr
